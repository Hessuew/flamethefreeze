---
import Layout from "~/layouts/PageLayout.astro";
import Hero from "~/components/widgets/Hero.astro";
import { useTranslations } from "~/i18n/utils";
import { TextAnimate } from "~/components/magicui/text-animate";
import church_today from "~/assets/images/church/biblical_church-church_today.webp";
import SubtitleContainer from "~/components/ui/SubtitleContainer.astro";
import GradientText from "~/components/ui/GradientText.astro";
import ContentList from "~/components/widgets/ContentList.astro";

const { metadata, siteRebuildStatus, lang } = Astro.props;

const t = useTranslations(lang);

const contentItems = [
  {
    title: t("church.steps.items1.title"),
    question: t("church.steps.items1.question"),
    description: [
      { text: t("church.steps.items1.description1"), emoji: "☝️" },
      { text: t("church.steps.items1.description2"), emoji: "👀" },
      { text: t("church.steps.items1.description3"), emoji: "🍖" },
    ],
    color: "blue" as const,
  },
  {
    title: t("church.steps.items2.title"),
    question: t("church.steps.items2.question"),
    description: [
      { text: t("church.steps.items2.description1"), emoji: "😵" },
      { text: t("church.steps.items2.description2"), emoji: "☠️" },
      { text: t("church.steps.items2.description3"), emoji: "📜" },
    ],
    color: "orange" as const,
  },
  {
    title: t("church.steps.items3.title"),
    subtitle: t("church.steps.items3.subtitle"),
    question: t("church.steps.items3.question"),
    description: [
      { text: t("church.steps.items3.description1"), emoji: "❤️" },
      { text: t("church.steps.items3.description2"), emoji: "😁" },
      { text: t("church.steps.items3.description3"), emoji: "🫂" },
    ],
    color: "purple" as const,
  },
  {
    title: t("church.steps.items4.title"),
    subtitle: t("church.steps.items4.subtitle"),
    question: t("church.steps.items4.question"),
    description: [
      { text: t("church.steps.items4.description1"), emoji: "❎" },
      { text: t("church.steps.items4.description2"), emoji: "🤔" },
      { subtitle: true, text: t("church.steps.items4.description3") },
      { text: t("church.steps.items4.description4"), emoji: "🚶" },
      { text: t("church.steps.items4.description5"), emoji: "👁️" },
      { subtitle: true, text: t("church.steps.items4.description6") },
      { text: t("church.steps.items4.description7"), emoji: "📈" },
      { text: t("church.steps.items4.description8"), emoji: "👷" },
    ],
    color: "purple" as const,
  },
  {
    title: t("church.steps.items5.title"),
    subtitle: t("church.steps.items5.subtitle"),
    question: t("church.steps.items5.question"),
    description: [
      { text: t("church.steps.items5.description1"), emoji: "∞" },
      { text: t("church.steps.items5.description2"), emoji: "🙋‍♂️🙋‍♂️" },
      { subtitle: true, text: t("church.steps.items5.description3") },
      { text: t("church.steps.items5.description4"), emoji: "➔" },
      { text: t("church.steps.items5.description5"), emoji: "🐍" },
    ],
    color: "green" as const,
  },
  {
    title: t("church.steps.items6.title"),
    question: t("church.steps.items6.question"),
    description: [
      { text: t("church.steps.items6.description1"), emoji: "🖤⃝🤍" },
      { text: t("church.steps.items6.description2"), emoji: "🌍" },
      { text: t("church.steps.items6.description3"), emoji: "❤️‍🔥" },
    ],
    color: "red" as const,
  },
  {
    title: t("church.steps.items7.title"),
    subtitle: t("church.steps.items7.subtitle"),
    question: t("church.steps.items7.question"),
    description: [
      { text: t("church.steps.items7.description1"), emoji: "💯" },
      { text: t("church.steps.items7.description2"), emoji: "🩸" },
      { text: t("church.steps.items7.description3"), emoji: "🧹" },
    ],
    color: "yellow" as const,
  },
  {
    title: t("church.steps.items8.title"),
    question: t("church.steps.items8.question"),
    description: [
      { text: t("church.steps.items8.description1"), emoji: "𓀝" },
      { text: t("church.steps.items8.description2"), emoji: "🔥" },
      { text: t("church.steps.items8.description3"), emoji: "👨‍⚖️" },
    ],
    color: "orange" as const,
  },
  {
    title: t("church.steps.items9.title"),
    subtitle: t("church.steps.items9.subtitle"),
    question: t("church.steps.items9.question"),
    description: [
      { text: t("church.steps.items9.description1"), emoji: "💥" },
      { text: t("church.steps.items9.description2"), emoji: "🌬️" },
      { text: t("church.steps.items9.description3"), emoji: "✅" },
      { text: t("church.steps.items9.description4"), emoji: "🏛️" },
    ],
    color: "blue" as const,
  },
  {
    title: t("church.steps.items10.title"),
    subtitle: t("church.steps.items10.subtitle"),
    question: t("church.steps.items10.question"),
    description: [
      { text: t("church.steps.items10.description1"), emoji: "🙅‍♂️🍖" },
      { text: t("church.steps.items10.description2"), emoji: "𝓯𝓻𝓮𝓮" },
    ],
    color: "green" as const,
  },
];
---

<Layout lang={lang} metadata={metadata} siteRebuildStatus={siteRebuildStatus}>
  <div class="min-h-screen top-[64px] relative parallax-scene" id="parallax-container">
    <!-- Background Image -->
    <div
      class="absolute inset-0 w-full h-full bg-cover bg-center bg-no-repeat z-0"
      style={`background-image: url(${church_today.src})`}
    >
    </div>

    <!-- Star Layer 1 - Far background -->
    <div class="absolute inset-0 parallax-layer z-20" data-speed="0.1">
      <div class="star-symbol star-1">⟡</div>
      <div class="star-symbol star-2">⟡</div>
      <div class="star-symbol star-3">⟡</div>
    </div>

    <!-- Star Layer 2 - Mid background -->
    <div class="absolute inset-0 parallax-layer z-30" data-speed="0.3">
      <div class="star-symbol star-4">⟡</div>
      <div class="star-symbol star-5">⟡</div>
      <div class="star-symbol star-6">⟡</div>
    </div>

    <!-- Star Layer 3 - Foreground -->
    <div class="absolute inset-0 parallax-layer z-40" data-speed="0.6">
      <div class="star-symbol star-7">⟡</div>
      <div class="star-symbol star-8">⟡</div>
    </div>

    <!-- Star Layer 4 - Foreground -->
    <div class="absolute inset-0 parallax-layer z-50" data-speed="0.6">
      <div class="star-symbol star-9">⟡</div>
      <div class="star-symbol star-10">⟡</div>
    </div>

    <!-- Cloud Layer - Bottom parallax -->
    <!-- <div class="absolute inset-0 parallax-layer z-50" data-speed="0.3">
      <div class="cloud-layer" style={`background-image: url(${cloud.src})`}></div>
    </div> -->

    <Hero classes={{ containerClass: "relative z-10" }}>
      <Fragment slot="title">
        <div class="flex flex-col justify-center">
          <TextAnimate
            client:load
            className="text-10xl md:text-9xl xl:text-[128px] xl:leading-[128px] font-semibold leading-tight tracking-tighter md:mb-4 xl:mb-[16px] font-heading text-black"
            animation="blurInUp"
            delay={1}
            duration={0.6}
            by="character"
            once={true}
            text={"Biblical Church"}
          />
          <TextAnimate
            client:load
            className="text-xl md:text-2xl xl:text-[20px] xl:leading-[28px] font-normal leading-tight tracking-tighter md:mb-4 xl:mb-[16px] font-heading text-black"
            animation="blurInUp"
            delay={1.6}
            duration={0.6}
            by="character"
            once={true}
            text={"Biblical Church in 2025?"}
          />
        </div>
      </Fragment>

      <Fragment slot="subtitle">
        <SubtitleContainer label1={"Jesus"} label2={"Church"} label3={"Righteousness"} theme="light">
          <Fragment slot="subtitle">
            {t("church.herotext.subtitle1")}
            <span class="font-semibold">{t("church.herotext.subtitle.span1")} </span>
            {t("church.herotext.subtitle2")}
            <GradientText class="font-bold" text={t("church.herotext.subtitle.span2")} />
            {t("church.herotext.subtitle3")}
          </Fragment>
        </SubtitleContainer>
      </Fragment>
    </Hero>
  </div>

  <ContentList
    headlineType={2}
    tagline="How"
    title="How to identify a biblical church?"
    subtitle="You can spot a biblical church by asking a few practical questions. 🤔💭 Check these 10 key aspects and see how the church measures up. 📐👷‍♂️🏛️"
    contentItems={contentItems}
    classes={{
      headline: {
        subtitle: "max-w-md",
      },
    }}
  />
</Layout>

<style>
  .parallax-scene {
    perspective: 1000px;
    transform-style: preserve-3d;
  }

  .parallax-layer {
    will-change: transform;
    pointer-events: none;
  }

  .star-symbol {
    position: absolute;
    filter: drop-shadow(0 0 4px rgba(255, 255, 255, 0.8));
    color: rgba(255, 255, 255, 0.9);
    text-shadow: 0 0 8px rgba(255, 255, 255, 0.6);
    font-family:
      system-ui,
      -apple-system,
      sans-serif;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Layer 1 stars - Far background */
  .star-1 {
    font-size: 38px;
    top: 15%;
    left: 20%;
    color: rgba(255, 255, 255, 0.7);
  }

  .star-2 {
    font-size: 20px;
    top: 30%;
    right: 25%;
    color: rgba(255, 255, 255, 0.6);
  }

  .star-3 {
    font-size: 32px;
    top: 60%;
    left: 35%;
    color: rgba(255, 255, 255, 0.65);
  }

  /* Layer 2 stars - Mid background */
  .star-4 {
    font-size: 18px;
    top: 25%;
    left: 60%;
    color: rgba(255, 255, 255, 0.8);
  }

  .star-5 {
    font-size: 28px;
    top: 45%;
    right: 15%;
    color: rgba(255, 255, 255, 0.75);
  }

  .star-6 {
    font-size: 16px;
    top: 70%;
    left: 40%;
    color: rgba(255, 255, 255, 0.7);
  }

  /* Layer 3 stars - Foreground */
  .star-7 {
    font-size: 32px;
    top: 20%;
    right: 40%;
    color: rgba(255, 255, 255, 1);
  }

  .star-8 {
    font-size: 20px;
    top: 55%;
    right: 30%;
    color: rgba(255, 255, 255, 0.9);
  }

  /* Layer 4 stars - Foreground */
  .star-9 {
    font-size: 48px;
    top: 90%;
    right: 10%;
    color: rgba(255, 255, 255, 1);
  }

  .star-10 {
    font-size: 32px;
    top: 80%;
    right: 40%;
    color: rgba(255, 255, 255, 0.9);
  }

  /* Cloud Layer */
  .cloud-layer {
    position: fixed;
    bottom: -400px;
    left: 0;
    right: 0;
    height: 600px;
    background-size: cover;
    background-position: center top;
    background-repeat: no-repeat;
    z-index: 60;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .star-symbol {
      transform: scale(0.8);
    }

    .cloud-layer {
      bottom: -250px;
      height: 400px;
    }
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const parallaxLayers = document.querySelectorAll(".parallax-layer") as NodeListOf<HTMLElement>;

    let ticking = false;

    function updateParallax() {
      const scrollTop = window.pageYOffset;

      parallaxLayers.forEach((layer) => {
        const speed = parseFloat(layer.dataset.speed || "0");
        const yPos = -(scrollTop * speed);
        layer.style.transform = `translate3d(0, ${yPos}px, 0)`;
      });

      ticking = false;
    }

    function requestTick() {
      if (!ticking) {
        requestAnimationFrame(updateParallax);
        ticking = true;
      }
    }

    // Mouse movement parallax
    function handleMouseMove(e: MouseEvent) {
      const mouseX = e.clientX / window.innerWidth;
      const mouseY = e.clientY / window.innerHeight;

      parallaxLayers.forEach((layer) => {
        const speed = parseFloat(layer.dataset.speed || "0");
        const xMove = (mouseX - 0.5) * 60 * speed;
        const yMove = (mouseY - 0.5) * 60 * speed;
        const scrollY = window.pageYOffset * speed;

        layer.style.transform = `translate3d(${xMove}px, ${yMove - scrollY}px, 0)`;
      });
    }

    // Event listeners
    window.addEventListener("scroll", requestTick, { passive: true });
    window.addEventListener("mousemove", handleMouseMove, { passive: true });

    // Initial call
    updateParallax();

    // Cleanup function
    function cleanup() {
      window.removeEventListener("scroll", requestTick);
      window.removeEventListener("mousemove", handleMouseMove);
    }

    // Cleanup on page unload
    document.addEventListener("astro:before-preparation", cleanup);
    document.addEventListener("astro:before-swap", cleanup);
    window.addEventListener("beforeunload", cleanup);
  });
</script>
