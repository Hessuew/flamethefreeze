---
import Layout from "~/layouts/PageLayout.astro";
import type { PageLayoutProps as Props } from "~/layouts/PageLayout.astro";
import Hero from "~/components/widgets/Hero.astro";
import { useTranslations } from "~/i18n/utils";
import { TextAnimate } from "~/components/magicui/text-animate";
import derek_prince from "~/assets/images/ministries/fire_of_god_and_fire_for_god-derek_prince.webp";
import kenneth_hagin from "~/assets/images/ministries/fire_of_god_and_fire_for_god-kenneth_hagin.webp";
import prayer_church from "~/assets/images/ministries/fire_of_god_and_fire_for_god-prayer_church.webp";
import church_today from "~/assets/images/church/biblical_church-church_today_beautiful.webp";
import SubtitleContainer from "~/components/ui/SubtitleContainer.astro";
import GradientText from "~/components/ui/GradientText.astro";
import ContentList from "~/components/widgets/ContentList.astro";
import { BlurFade } from "~/components/magicui/blur-fade";
import glorify_jesus from "~/assets/images/church/biblical_church-glorify_jesus.webp";
import deny_yourself from "~/assets/images/church/biblical_church-deny_yourself.webp";
import genuine_love from "~/assets/images/church/biblical_church-genuine_love.webp";
import hate_sin from "~/assets/images/church/biblical_church-hate_sin.webp";
import full_flame_prayer from "~/assets/images/church/biblical_church-full_flame_prayer.webp";
import save_souls from "~/assets/images/church/biblical_church-save_souls.webp";
import evident_holiness from "~/assets/images/church/biblical_church-evident_holiness.webp";
import judge_sin from "~/assets/images/church/biblical_church-judge_sin.webp";
import presence_of_god from "~/assets/images/church/biblical_church-presence_of_god.webp";
import holy_spirit from "~/assets/images/church/biblical_church-holy_spirit.webp";
import type { ContentItem } from "~/types";
import VideoShowcase from "~/components/widgets/VideoShowcase.astro";
import CallToAction2 from "~/components/widgets/CallToAction2.astro";

const { metadata, siteRebuildStatus, lang } = Astro.props;

const t = useTranslations(lang);

const contentItems: ContentItem[] = [
  {
    title: t("church.steps.items.1.title"),
    question: t("church.steps.items.1.question"),
    description: [
      { text: t("church.steps.items.1.description1"), emoji: "☝️" },
      { text: t("church.steps.items.1.description2"), emoji: "👀" },
      { text: t("church.steps.items.1.description3"), emoji: "🍖" },
    ],
    color: "yellow" as const,
    image: { src: glorify_jesus, alt: t("church.steps.items.1.imageAlt") },
  },
  {
    title: t("church.steps.items.2.title"),
    question: t("church.steps.items.2.question"),
    description: [
      { text: t("church.steps.items.2.description1"), emoji: "😵" },
      { text: t("church.steps.items.2.description3"), emoji: "📜" },
    ],
    color: "purple" as const,
    image: { src: deny_yourself, alt: t("church.steps.items.2.imageAlt") },
  },
  {
    title: t("church.steps.items.3.title"),
    subtitle: t("church.steps.items.3.subtitle"),
    question: t("church.steps.items.3.question"),
    description: [
      { text: t("church.steps.items.3.description1"), emoji: "❤️" },
      { text: t("church.steps.items.3.description2"), emoji: "😁" },
      { text: t("church.steps.items.3.description3"), emoji: "🫂" },
    ],
    color: "red" as const,
    image: { src: genuine_love, alt: t("church.steps.items.3.imageAlt") },
  },
  {
    title: t("church.steps.items.4.title"),
    subtitle: t("church.steps.items.4.subtitle"),
    question: t("church.steps.items.4.question"),
    description: [
      { text: t("church.steps.items.4.description1"), emoji: "❎" },
      { text: t("church.steps.items.4.description2"), emoji: "💔" },
      { subtitle: true, text: t("church.steps.items.4.description3") },
      // { text: t("church.steps.items.4.description4"), emoji: "🚶" },
      { text: t("church.steps.items.4.description5"), emoji: "👁️" },
      { text: t("church.steps.items.4.description7"), emoji: "📈" },
      { subtitle: true, text: t("church.steps.items.4.description6") },
      // { text: t("church.steps.items.4.description8"), emoji: "👷" },
    ],
    color: "poison" as const,
    image: { src: hate_sin, alt: t("church.steps.items.4.imageAlt") },
  },
  {
    title: t("church.steps.items.5.title"),
    subtitle: t("church.steps.items.5.subtitle"),
    question: t("church.steps.items.5.question"),
    description: [
      { text: t("church.steps.items.5.description1"), emoji: "🔄" },
      { subtitle: true, text: t("church.steps.items.5.description3") },
      { text: t("church.steps.items.5.description4"), emoji: "➡️" },
      { text: t("church.steps.items.5.description5"), emoji: "🐍" },
    ],
    color: "orange" as const,
    image: { src: full_flame_prayer, alt: t("church.steps.items.5.imageAlt") },
  },
  {
    title: t("church.steps.items.6.title"),
    question: t("church.steps.items.6.question"),
    description: [
      { text: t("church.steps.items.6.description1"), emoji: "🖤⃝🤍" },
      { text: t("church.steps.items.6.description2"), emoji: "🌍📣" },
    ],
    color: "emerald" as const,
    image: { src: save_souls, alt: t("church.steps.items.6.imageAlt") },
  },
  {
    title: t("church.steps.items.7.title"),
    subtitle: t("church.steps.items.7.subtitle"),
    question: t("church.steps.items.7.question"),
    description: [
      { text: t("church.steps.items.7.description1"), emoji: "💯" },
      { text: t("church.steps.items.7.description2"), emoji: "😇" },
      { text: t("church.steps.items.7.description3"), emoji: "🧹" },
    ],
    color: "teal" as const,
    image: { src: evident_holiness, alt: t("church.steps.items.8.imageAlt") },
  },
  {
    title: t("church.steps.items.8.title"),
    question: t("church.steps.items.8.question"),
    description: [
      { text: t("church.steps.items.8.description1"), emoji: "𓀝" },
      { text: t("church.steps.items.8.description2"), emoji: "🔥" },
      { text: t("church.steps.items.8.description3"), emoji: "👨‍⚖️" },
    ],
    color: "cream" as const,
    image: { src: judge_sin, alt: t("church.steps.items.8.imageAlt") },
  },
  {
    title: t("church.steps.items.9.title"),
    subtitle: t("church.steps.items.9.subtitle"),
    question: t("church.steps.items.9.question"),
    description: [
      { text: t("church.steps.items.9.description2"), emoji: "💥" },
      { text: t("church.steps.items.9.description3"), emoji: "✅" },
      { text: t("church.steps.items.9.description4"), emoji: "🏛️" },
    ],
    color: "indigo" as const,
    image: { src: presence_of_god, alt: t("church.steps.items.9.imageAlt") },
  },
  {
    title: t("church.steps.items.10.title"),
    subtitle: t("church.steps.items.10.subtitle"),
    question: t("church.steps.items.10.question"),
    description: [
      { text: t("church.steps.items.10.description1"), emoji: "🙅‍♂️🍖" },
      { text: t("church.steps.items.10.description2"), emoji: "𝓯𝓻𝓮𝓮" },
    ],
    color: "pink" as const,
    image: { src: holy_spirit, alt: t("church.steps.items.10.imageAlt") },
  },
];
---

<Layout lang={lang} metadata={metadata} siteRebuildStatus={siteRebuildStatus}>
  <div class="min-h-screen md:top-[64px] relative parallax-scene" id="parallax-container">
    <!-- Background Image -->
    <div class="absolute inset-0 w-full h-full z-0 overflow-hidden">
      <img
        src={church_today.src}
        alt="Beautiful church today"
        class="w-full h-full church-background-image"
        style="min-height: 100vh; min-width: 100%;"
        loading="eager"
        decoding="async"
      />
      <!-- Subtle overlay to ensure text readability -->
    </div>

    <!-- Star Layer 1 - Far background -->
    <BlurFade client:load className="absolute inset-0 pointer-events-none z-20" delay={3.4} direction="up" inView>
      <div class="absolute inset-0 parallax-layer z-20" data-speed="0.1">
        <div class="star-symbol text-white/70 top-[15%] left-[20%] text-[50px]" aria-hidden="true" role="presentation">
          ⟡
        </div>
        <div class="star-symbol text-white/60 top-[30%] right-[45%] text-[32px]" aria-hidden="true" role="presentation">
          ⟡
        </div>
        <div class="star-symbol text-white/65 top-[60%] left-[35%] text-[44px]" aria-hidden="true" role="presentation">
          ⟡
        </div>
      </div>
    </BlurFade>

    <!-- Star Layer 2 - Mid background -->
    <BlurFade client:load className="absolute inset-0 pointer-events-none z-30" delay={3.45} direction="up" inView>
      <div class="absolute inset-0 parallax-layer z-30" data-speed="0.3">
        <div class="star-symbol text-white top-[21%] right-[25%] text-[30px]" aria-hidden="true" role="presentation">
          ⟡
        </div>
        <div class="star-symbol text-white/75 top-[45%] right-[15%] text-[40px]" aria-hidden="true" role="presentation">
          ⟡
        </div>
        <div class="star-symbol text-white/70 top-[70%] left-[40%] text-[28px]" aria-hidden="true" role="presentation">
          ⟡
        </div>
      </div>
    </BlurFade>

    <!-- Star Layer 3 - Foreground -->
    <BlurFade client:load className="absolute inset-0 pointer-events-none z-40" delay={3.5} direction="up" inView>
      <div class="absolute inset-0 parallax-layer z-40" data-speed="0.6">
        <div class="star-symbol text-white top-[17%] right-[23%] text-[44px]" aria-hidden="true" role="presentation">
          ⟡
        </div>
        <div class="star-symbol text-white/90 top-[55%] right-[30%] text-[32px]" aria-hidden="true" role="presentation">
          ⟡
        </div>
      </div>
    </BlurFade>

    <!-- Star Layer 4 - Foreground -->
    <BlurFade client:load className="absolute inset-0 pointer-events-none z-50" delay={3.55} direction="up" inView>
      <div class="absolute inset-0 parallax-layer z-50" data-speed="0.6">
        <div class="star-symbol text-white top-[90%] right-[10%] text-[60px]" aria-hidden="true" role="presentation">
          ⟡
        </div>
        <div class="star-symbol text-white/90 top-[80%] right-[40%] text-[44px]" aria-hidden="true" role="presentation">
          ⟡
        </div>
      </div>
    </BlurFade>

    <Hero classes={{ containerClass: "relative z-10" }}>
      <Fragment slot="title">
        <div class="flex flex-col justify-center">
          <TextAnimate
            client:load
            className="text-10xl md:text-9xl xl:text-[128px] xl:leading-[128px] font-semibold leading-tight tracking-tighter md:mb-4 xl:mb-[16px] font-heading text-black"
            animation="blurInUp"
            delay={1}
            duration={0.6}
            by="character"
            once={true}
            text={t("church.herotext.title.1")}
          />
          <TextAnimate
            client:load
            className="text-xl md:text-2xl xl:text-[20px] xl:leading-[28px] font-normal leading-tight tracking-tighter md:mb-4 xl:mb-[16px] font-heading text-black"
            animation="blurInUp"
            delay={1.6}
            duration={0.4}
            by="character"
            once={true}
            text={t("church.herotext.title.2")}
          />
        </div>
      </Fragment>

      <Fragment slot="subtitle">
        <SubtitleContainer label1={"Jesus"} label2={"Church"} label3={"Righteousness"} theme="light">
          <Fragment slot="subtitle">
            {t("church.herotext.subtitle1")}
            <span class="font-semibold">{t("church.herotext.subtitle.span1")} </span>
            {t("church.herotext.subtitle2")}
            <GradientText class="font-bold" text={t("church.herotext.subtitle.span2")} />
            {t("church.herotext.subtitle3")}
          </Fragment>
        </SubtitleContainer>
      </Fragment>
    </Hero>
  </div>

  <ContentList
    headlineType={2}
    tagline="How"
    title={t("church.contentList.title")}
    subtitle={t("church.contentList.subtitle")}
    contentItems={contentItems}
    classes={{
      headline: {
        subtitle: "max-w-md",
      },
    }}
  />

  <VideoShowcase
    id="where"
    tagline={t("index.where.tagline")}
    title={t("church.videoShowcase.title")}
    headlineType={3}
    classes={{
      headline: {
        subtitle: "mx-0 max-w-md",
      },
    }}
    videos={[
      {
        title: t("index.where.images.1.title"),
        link: "https://www.youtube.com/@Rukouksenseurakunta",
        description: t("index.where.images.1.description"),
        features: [t("index.where.images.1.features.1"), t("index.where.images.1.features.2")],
        src: prayer_church,
        alt: t("index.what.images.1.alt"),
      },
      {
        title: t("index.where.images.2.title"),
        link: "https://www.youtube.com/@RHEMAKennethEHagin",
        description: t("index.where.images.2.description"),
        features: [t("index.where.images.2.features.1"), t("index.where.images.2.features.2")],
        src: kenneth_hagin,
        alt: t("index.where.images.2.alt"),
        objectPosition: "top center",
      },
      {
        title: t("index.where.images.3.title"),
        link: "https://www.youtube.com/@DerekPrinceMinistries",
        description: t("index.where.images.3.description"),
        features: [t("index.where.images.3.features.1"), t("index.where.images.3.features.2")],
        src: derek_prince,
        alt: t("index.where.images.3.alt"),
        objectPosition: "top center",
      },
    ]}
  >
    <Fragment slot="subtitle">
      {t("church.videoShowcase.subtitle.1")}
    </Fragment>
  </VideoShowcase>

  <CallToAction2
    id="cta"
    title={t("church.cta.title.1")}
    title2={t("church.cta.title.2")}
    subtitle={t("church.cta.subtitle.1")}
    button={{
      href: "devotions",
      text: t("church.cta.button"),
      icon: "tabler:growth",
    }}
    lang={lang}
  />
</Layout>

<style>
  .parallax-scene {
    perspective: 1000px;
    transform-style: preserve-3d;
  }

  .parallax-layer {
    will-change: transform;
    pointer-events: none;
  }

  .star-symbol {
    position: absolute;
    filter: drop-shadow(0 0 4px rgba(255, 255, 255, 0.8));
    text-shadow: 0 0 8px rgba(255, 255, 255, 0.6);
  }

  /* Enhanced image display */
  .church-background-image {
    image-rendering: -webkit-optimize-contrast;
    image-rendering: crisp-edges;
    backface-visibility: hidden;
    transform: translateZ(0);
    /* Ensure smooth loading */
    transition: opacity 0.3s ease-in-out;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .star-symbol {
      transform: scale(0.8);
    }

    .church-background-image {
      object-fit: cover;
      object-position: center center;
    }
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const parallaxLayers = document.querySelectorAll(".parallax-layer");
    const reduceMotion = window.matchMedia?.("(prefers-reduced-motion: reduce)")?.matches;
    if (reduceMotion || !parallaxLayers.length) return;

    let rafId = 0;
    let pending = false;
    let mx = 0.5;
    let my = 0.5;
    let scrollTop = window.pageYOffset;

    function render() {
      pending = false;
      parallaxLayers.forEach((layer: HTMLElement) => {
        const speed = parseFloat(layer.dataset.speed || "0");
        const xMove = (mx - 0.5) * 60 * speed;
        const yMove = (my - 0.5) * 60 * speed;
        const y = yMove - scrollTop * speed;
        layer.style.transform = `translate3d(${xMove}px, ${y}px, 0)`;
      });
    }

    function schedule() {
      if (pending) return;
      pending = true;
      rafId = requestAnimationFrame(render);
    }

    function onScroll() {
      scrollTop = window.pageYOffset;
      schedule();
    }
    function onMouseMove(e) {
      mx = e.clientX / window.innerWidth;
      my = e.clientY / window.innerHeight;
      schedule();
    }

    window.addEventListener("scroll", onScroll, { passive: true });
    window.addEventListener("mousemove", onMouseMove, { passive: true });
    schedule();

    function cleanup() {
      cancelAnimationFrame(rafId);
      window.removeEventListener("scroll", onScroll);
      window.removeEventListener("mousemove", onMouseMove);
    }
    document.addEventListener("astro:before-preparation", cleanup);
    document.addEventListener("astro:before-swap", cleanup);
    window.addEventListener("beforeunload", cleanup);
  });
</script>
