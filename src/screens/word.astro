---
import Layout from "~/layouts/PageLayout.astro";
import Hero from "~/components/widgets/Hero.astro";
import { useTranslations } from "~/i18n/utils";
import { TextAnimate } from "~/components/magicui/text-animate";
import { BlurFade } from "~/components/magicui/blur-fade";
import FireButton from "~/components/ui/FireButton.astro";
import WordList from "~/components/widgets/WordList.astro";
import ZoomLinks from "~/components/widgets/ZoomLinks.astro";
// Word images
import less from "~/assets/images/word/the_power_of_the_words-less.webp";
import listen from "~/assets/images/word/the_power_of_the_words-listen.webp";
import purpose from "~/assets/images/word/the_power_of_the_words-purpose.webp";
import questions from "~/assets/images/word/the_power_of_the_words-questions.webp";
import apprentice from "~/assets/images/word/the_power_of_the_words-apprentice.webp";
import build_up from "~/assets/images/word/the_power_of_the_words-build_up.webp";
import simple from "~/assets/images/word/the_power_of_the_words-simple.webp";
import principles from "~/assets/images/word/the_power_of_the_words-principles.webp";
import believe from "~/assets/images/word/the_power_of_the_words-believe.webp";
import from_heart from "~/assets/images/word/the_power_of_the_words-from_heart.webp";
import { ENDPOINTS } from "~/config/endpoints";

const { metadata, siteRebuildStatus, lang } = Astro.props;

const t = useTranslations(lang);

// Zoom links data structure
const zoomLinks = [
  {
    title: t("zoom.bible.title"),
    description: t("zoom.bible.description"),
    url: "https://flamethefreeze.zoom.us/j/89840579351?pwd=Hr5ZAcJHbUVrybCIIySL6sT6Vw7Rly.1",
    icon: "tabler:book-2",
    time: t("zoom.bible.time"),
    recurring: t("zoom.bible.recurring"),
    meetingId: "898 4057 9351",
    passcode: "983643",
    weekType: "odd" as const,
  },
  {
    title: t("zoom.prayer.title"),
    description: t("zoom.prayer.description"),
    url: "https://flamethefreeze.zoom.us/j/82297139976?pwd=2ZCDgn6UVPyuqKeKsh8CWBN3IQhiXu.1",
    icon: "tabler:pray",
    time: t("zoom.prayer.time"),
    recurring: t("zoom.prayer.recurring"),
    meetingId: "822 9713 9976",
    passcode: "706512",
    weekType: "even" as const,
  },
];

// Word items data structure
const wordItems = [
  {
    image: less,
    title: t("word.wordItems.title.1"),
    subtitle: t("word.wordItems.subtitle.1"),
    description: t("word.wordItems.description.1"),
    color: "blue" as const,
    emoji: "ü§´",
  },
  {
    image: listen,
    title: t("word.wordItems.title.2"),
    subtitle: t("word.wordItems.subtitle.2"),
    description: t("word.wordItems.description.2"),
    color: "orange" as const,
    emoji: "üëÇ",
  },
  {
    image: questions,
    title: t("word.wordItems.title.3"),
    subtitle: t("word.wordItems.subtitle.3"),
    description: t("word.wordItems.description.3"),
    color: "purple" as const,
    emoji: "ü§î",
  },
  {
    image: purpose,
    title: t("word.wordItems.title.4"),
    subtitle: t("word.wordItems.subtitle.4"),
    description: t("word.wordItems.description.4"),
    color: "green" as const,
    emoji: "üôã‚Äç‚ôÇÔ∏è",
  },
  {
    image: apprentice,
    title: t("word.wordItems.title.5"),
    subtitle: t("word.wordItems.subtitle.5"),
    description: t("word.wordItems.description.5"),
    color: "indigo" as const,
    emoji: "üå±",
  },
  {
    image: build_up,
    title: t("word.wordItems.title.6"),
    subtitle: t("word.wordItems.subtitle.6"),
    description: t("word.wordItems.description.6"),
    color: "yellow" as const,
    emoji: "üë∑‚Äç‚ôÇÔ∏è",
  },
  {
    image: simple,
    title: t("word.wordItems.title.7"),
    subtitle: t("word.wordItems.subtitle.7"),
    description: t("word.wordItems.description.7"),
    color: "red" as const,
    emoji: "üôÇ",
  },
  {
    image: principles,
    title: t("word.wordItems.title.8"),
    subtitle: t("word.wordItems.subtitle.8"),
    description: t("word.wordItems.description.8"),
    color: "pink" as const,
    emoji: "üß±",
  },
  {
    image: believe,
    title: t("word.wordItems.title.9"),
    subtitle: t("word.wordItems.subtitle.9"),
    description: t("word.wordItems.description.9"),
    color: "blue" as const,
    emoji: "üíé",
  },
  {
    image: from_heart,
    title: t("word.wordItems.title.10"),
    subtitle: t("word.wordItems.subtitle.10"),
    description: t("word.wordItems.description.10"),
    color: "orange" as const,
    emoji: "‚ù§Ô∏è‚Äçüî•",
  },
];
---

<Layout lang={lang} metadata={metadata} siteRebuildStatus={siteRebuildStatus}>
  <div class="min-h-screen relative overflow-hidden">
    <!-- Video Background -->

    <video
      id="word-hero-video"
      aria-label={t("index.hero.video.aria")}
      class="absolute inset-0 w-full h-full object-cover z-0 opacity-0 transition-opacity duration-1000 ease-in-out"
      data-src={`${ENDPOINTS.publicFiles}/the_power_of_the_works-fireworks_video.mp4`}
      loop
      muted
      playsinline
      preload="auto"
    >
      {t("index.hero.video.browser")}
    </video>

    <Hero classes={{ containerClass: "relative z-10" }}>
      <Fragment slot="title">
        <div class="flex flex-col justify-center">
          <TextAnimate
            client:load
            className="text-4xl xs:text-5xl md:text-6xl xl:text-[60px] xl:leading-[64px] font-semibold leading-tight tracking-tighter md:mb-4 xl:mb-[16px] font-heading text-white"
            animation="blurInUp"
            delay={1}
            duration={0.6}
            by="character"
            once={true}
            text={t("word.hero.title.1")}
          />
          <TextAnimate
            client:load
            className="text-4xl xs:text-5xl md:text-6xl xl:text-[60px] xl:leading-[64px] font-semibold leading-tight tracking-tighter mb-4 xl:mb-[16px] font-heading text-orange-400"
            animation="blurInUp"
            delay={1.6}
            duration={0.6}
            by="character"
            once={true}
            text={t("word.hero.title.2")}
          />
        </div>
      </Fragment>

      <Fragment slot="subtitle">
        <div class="flex justify-center mb-8 xl:mb-[32px]">
          <div class="max-w-2xl xl:max-w-[673px] px-4 xl:px-[16px]">
            <BlurFade client:load delay={3} direction="up" inView>
              <div class="hero-subtitle-card group relative overflow-hidden">
                <!-- Glass Morphism Background -->
                <div
                  class="absolute inset-0 backdrop-blur-xl bg-black/20 border border-white/10 rounded-2xl xl:rounded-[16px] shadow-xl"
                >
                </div>

                <!-- Animated Border -->
                <div
                  class="absolute inset-0 rounded-2xl xl:rounded-[16px] bg-gradient-to-r from-blue-500 via-purple-500 to-orange-500 opacity-0 group-hover:opacity-100 transition-opacity duration-300 p-[2px]"
                >
                  <div
                    class="w-full h-full bg-gradient-to-br from-[#0a0014] via-[#1a0024] to-[#2d1b69] rounded-2xl xl:rounded-[16px]"
                  >
                  </div>
                </div>

                <!-- Content -->
                <div class="relative p-4 lg:p-8 xl:p-[32px] h-full flex flex-col">
                  <!-- Text content -->
                  <div class="relative text-center">
                    <span
                      class="block text-xl xl:text-[20px] xl:leading-[28px] tracking-normal text-white group-hover:text-blue-400 transition-colors duration-300"
                    >
                      {t("word.hero.subtitle.1")}
                    </span>

                    <!-- Enhanced decorative elements -->
                    <div class="flex justify-center mt-6 xl:mt-[24px]">
                      <div class="flex items-center space-x-4 xl:space-x-[16px]">
                        <div
                          class="w-12 xl:w-[48px] h-0.5 xl:h-[2px] bg-gradient-to-r from-transparent via-blue-400/80 to-blue-400/80 rounded-full"
                        >
                        </div>
                        <div
                          class="w-3 xl:w-[12px] h-3 xl:h-[12px] bg-white/80 rounded-full shadow-lg group-hover:bg-blue-300 transition-colors duration-300"
                          style="box-shadow: 0 0 15px rgba(255, 255, 255, 0.8);"
                        >
                        </div>
                        <div
                          class="w-12 xl:w-[48px] h-0.5 xl:h-[2px] bg-gradient-to-l from-transparent via-orange-400/80 to-orange-400/80 rounded-full"
                        >
                        </div>
                      </div>
                    </div>
                  </div>

                  <!-- Meeting Info Style Elements -->
                  <div
                    class="flex justify-center space-x-6 xl:space-x-[24px] mt-4 xl:mt-[16px] text-xs xl:text-[12px] xl:leading-[16px] text-gray-400"
                  >
                    <div class="flex items-center">
                      <div
                        class="w-2 h-2 xl:w-[8px] xl:h-[8px] bg-blue-400 rounded-full mr-2 xl:mr-[8px] animate-pulse"
                      >
                      </div>
                      <span>Divine</span>
                    </div>
                    <div class="flex items-center">
                      <div
                        class="w-2 h-2 xl:w-[8px] xl:h-[8px] bg-purple-400 rounded-full mr-2 xl:mr-[8px] animate-pulse delay-300"
                      >
                      </div>
                      <span>Fire</span>
                    </div>
                    <div class="flex items-center">
                      <div
                        class="w-2 h-2 xl:w-[8px] xl:h-[8px] bg-orange-400 rounded-full mr-2 xl:mr-[8px] animate-pulse delay-700"
                      >
                      </div>
                      <span>Word</span>
                    </div>
                  </div>
                </div>
              </div>
            </BlurFade>
          </div>
        </div>
      </Fragment>
    </Hero>

    <!-- Actions positioned at bottom center on mobile, bottom right on larger screens -->
    <div
      class="absolute bottom-40 xl:bottom-[160px] left-1/2 -translate-x-1/2 md:left-auto md:translate-x-0 md:right-4 lg:right-12 xl:right-[48px] flex z-20 min-w-[324px]"
    >
      <BlurFade client:load delay={4.2} direction="up" inView>
        <FireButton
          id="show-video-btn"
          text={t("word.hero.cta.button")}
          variant="primary"
          size="small"
          icon="tabler:arrow-right"
        />
      </BlurFade>
    </div>
  </div>

  <WordList wordItems={wordItems} />

  <!-- Zoom Links Widget -->
  <ZoomLinks title={t("zoom.title")} subtitle={t("zoom.subtitle")} zoomLinks={zoomLinks} />
</Layout>

<script>
  document.addEventListener("astro:page-load", () => {
    const heroVideo = document.getElementById("word-hero-video") as HTMLVideoElement;
    const showVideoBtn = document.getElementById("show-video-btn") as HTMLElement;
    let videoLoaded = false;
    let videoDisplayed = false;

    // Load video after 2 seconds but keep it hidden
    if (heroVideo) {
      setTimeout(() => {
        const videoSrc = heroVideo.dataset.src;

        if (videoSrc && !heroVideo.src) {
          heroVideo.src = videoSrc;
          heroVideo.preload = "metadata";
          heroVideo.load();
        }

        // Set up event listener for when video has loaded enough data
        const handleVideoLoaded = () => {
          videoLoaded = true;
          heroVideo.removeEventListener("loadeddata", handleVideoLoaded);
        };

        heroVideo.addEventListener("loadeddata", handleVideoLoaded);

        // Fallback: if video is already loaded (cached)
        if (heroVideo.readyState >= 2) {
          handleVideoLoaded();
        }
      }, 2000);
    }

    // Function to display video and handle auto-scroll
    const displayVideo = () => {
      if (videoDisplayed) return;
      videoDisplayed = true;

      const revealAndPlay = () => {
        heroVideo.classList.remove("opacity-0");
        heroVideo.classList.add("opacity-100");
        const playPromise = heroVideo.play();
        if (playPromise !== undefined) {
          playPromise.catch(() => {
            /* ignore autoplay errors */
          });
        }
        // Auto-scroll to #word-list after ~3.2 seconds of video display
        setTimeout(() => {
          const wordListSection = document.getElementById("word-list");
          wordListSection?.scrollIntoView({ behavior: "smooth", block: "start" });
        }, 3200);
      };

      if (!videoLoaded) {
        const videoSrc = heroVideo.dataset.src;
        if (videoSrc && !heroVideo.src) {
          heroVideo.src = videoSrc;
          heroVideo.preload = "metadata";
          heroVideo.load();
        }
        const onLoaded = () => {
          heroVideo.removeEventListener("loadeddata", onLoaded);
          videoLoaded = true;
          revealAndPlay();
        };
        heroVideo.addEventListener("loadeddata", onLoaded);
        if (heroVideo.readyState >= 2) {
          heroVideo.removeEventListener("loadeddata", onLoaded);
          videoLoaded = true;
          revealAndPlay();
        }
      } else {
        revealAndPlay();
      }
    };

    // Add click event listener to fire button
    if (showVideoBtn) {
      showVideoBtn.addEventListener("click", (e) => {
        e.preventDefault();
        displayVideo();
      });
    }
  });
</script>

<style>
  .hero-subtitle-card {
    @apply relative transform transition-all duration-300;
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.1));
    backdrop-filter: blur(20px);
  }

  .hero-subtitle-card::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      135deg,
      rgba(59, 130, 246, 0.1) 0%,
      rgba(147, 51, 234, 0.1) 50%,
      rgba(251, 146, 60, 0.1) 100%
    );
    opacity: 0;
    transition: opacity 0.3s ease;
    border-radius: 1rem;
    z-index: -1;
  }

  .hero-subtitle-card:hover::before {
    opacity: 1;
  }

  /* Responsive adjustments */
  @media (max-width: 640px) {
    .hero-subtitle-card {
      @apply hover:scale-105 hover:-translate-y-1;
    }
  }

  /* Animation keyframes */
  @keyframes float {
    0%,
    100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-10px);
    }
  }
</style>
