---
import Layout from "~/layouts/PageLayout.astro";
import Hero from "~/components/widgets/Hero.astro";
import { useTranslations } from "~/i18n/utils";
import { TextAnimate } from "~/components/magicui/text-animate";
import power_of_the_words from "~/assets/videos/4.mp4";
import { BlurFade } from "~/components/magicui/blur-fade";
import FireButton from "~/components/ui/FireButton.astro";
import WordList from "~/components/widgets/WordList.astro";
// Word images
import word_bible from "~/assets/images/word/1.jpg";
import word_fire from "~/assets/images/word/asd.jpg";
import word_company from "~/assets/images/word/4.jpg";
import word_prayer from "~/assets/images/word/3b.jpg";
import word_tree from "~/assets/images/word/5.jpg";
import word_city from "~/assets/images/word/6.jpg";
import word_derek_prince from "~/assets/images/word/7.jpg";
import word_kenneth_hagin from "~/assets/images/ministries/fire_of_god_and_fire_for_god-kenneth_hagin.webp";
import word_koinonia from "~/assets/images/ministries/fire_of_god_and_fire_for_god-koinonia.webp";
import word_prayer_church from "~/assets/images/ministries/fire_of_god_and_fire_for_god-prayer_church.webp";
// import Stats from "~/components/widgets/Stats.astro";
// import GradientText from "~/components/ui/GradientText.astro";
// import { ENDPOINTS } from "~/config/endpoints";A man listening carefully a hand behind his ear.

const { metadata, siteRebuildStatus, lang } = Astro.props;

const t = useTranslations(lang);

// Word items data structure
const wordItems = [
  {
    image: word_bible,
    title: t("word.wordItems.title.1"),
    subtitle: t("word.wordItems.subtitle.1"),
    description: t("word.wordItems.description.1"),
    color: "blue" as const,
    emoji: "ðŸ¤«",
  },
  {
    image: word_fire,
    title: t("word.wordItems.title.2"),
    subtitle: t("word.wordItems.subtitle.2"),
    description: t("word.wordItems.description.2"),
    color: "orange" as const,
    emoji: "ðŸ‘‚",
  },
  {
    image: word_prayer,
    title: t("word.wordItems.title.3"),
    subtitle: t("word.wordItems.subtitle.3"),
    description: t("word.wordItems.description.3"),
    color: "purple" as const,
    emoji: "",
  },
  {
    image: word_company,
    title: t("word.wordItems.title.4"),
    subtitle: t("word.wordItems.subtitle.4"),
    description: t("word.wordItems.description.4"),
    color: "green" as const,
    emoji: "",
  },
  {
    image: word_tree,
    title: t("word.wordItems.title.5"),
    subtitle: t("word.wordItems.subtitle.5"),
    description: t("word.wordItems.description.5"),
    color: "indigo" as const,
    emoji: "",
  },
  {
    image: word_city,
    title: t("word.wordItems.title.6"),
    subtitle: t("word.wordItems.subtitle.6"),
    description: t("word.wordItems.description.6"),
    color: "yellow" as const,
    emoji: "",
  },
  {
    image: word_derek_prince,
    title: t("word.wordItems.title.7"),
    subtitle: t("word.wordItems.subtitle.7"),
    description: t("word.wordItems.description.7"),
    color: "red" as const,
    emoji: "",
  },
  {
    image: word_kenneth_hagin,
    title: t("word.wordItems.title.8"),
    subtitle: t("word.wordItems.subtitle.8"),
    description: t("word.wordItems.description.8"),
    color: "pink" as const,
    emoji: "",
  },
  {
    image: word_koinonia,
    title: t("word.wordItems.title.9"),
    subtitle: t("word.wordItems.subtitle.9"),
    description: t("word.wordItems.description.9"),
    color: "blue" as const,
    emoji: "",
  },
  {
    image: word_prayer_church,
    title: t("word.wordItems.title.10"),
    subtitle: t("word.wordItems.subtitle.10"),
    description: t("word.wordItems.description.10"),
    color: "orange" as const,
    emoji: "",
  },
];
---

<Layout lang={lang} metadata={metadata} siteRebuildStatus={siteRebuildStatus}>
  <div class="min-h-screen relative overflow-hidden">
    <!-- Video Background -->

    <!-- data-src={`${ENDPOINTS.publicFiles}/fire_of_god_and_fire_for_god-fire_bg.mp4`} -->
    <video
      id="word-hero-video"
      aria-label={t("index.hero.video.aria")}
      class="absolute inset-0 w-full h-full object-cover z-0 opacity-0 transition-opacity duration-1000 ease-in-out"
      data-src={power_of_the_words}
      loop
      muted
      playsinline
      preload="auto"
    >
      {t("index.hero.video.browser")}
    </video>

    <Hero classes={{ containerClass: "relative z-10" }}>
      <Fragment slot="title">
        <div class="flex flex-col justify-center">
          <TextAnimate
            client:load
            className="text-4xl xs:text-5xl md:text-6xl xl:text-[60px] xl:leading-[64px] font-semibold leading-tight tracking-tighter md:mb-4 xl:mb-[16px] font-heading text-white"
            animation="blurInUp"
            delay={1}
            duration={0.6}
            by="character"
            once={true}
            text={t("word.hero.title.1")}
          />
          <TextAnimate
            client:load
            className="text-4xl xs:text-5xl md:text-6xl xl:text-[60px] xl:leading-[64px] font-semibold leading-tight tracking-tighter mb-4 xl:mb-[16px] font-heading text-orange-400"
            animation="blurInUp"
            delay={1.6}
            duration={0.6}
            by="character"
            once={true}
            text={t("word.hero.title.2")}
          />
        </div>
      </Fragment>

      <Fragment slot="subtitle">
        <div class="flex justify-center mb-8 xl:mb-[32px]">
          <div class="max-w-2xl px-4">
            <BlurFade client:load delay={3} direction="up" inView>
              <div class="relative">
                <!-- Enhanced background with stronger contrast -->
                <div
                  class="absolute inset-0 bg-gradient-to-r from-blue-600/40 via-purple-600/40 to-orange-600/40 blur-2xl rounded-lg"
                >
                </div>

                <!-- Secondary glow layer -->
                <div class="absolute inset-0 bg-black/60 blur-lg rounded-lg"></div>

                <!-- Main subtitle container with enhanced glass morphism -->
                <div
                  class="relative backdrop-blur-xl bg-gradient-to-r from-black/40 via-black/50 to-black/40 border-2 border-white/30 rounded-2xl px-8 py-6 shadow-2xl"
                  style="box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.8), 0 0 0 1px rgba(255, 255, 255, 0.1), inset 0 1px 0 rgba(255, 255, 255, 0.2);"
                >
                  <!-- Strong inner glow -->
                  <div
                    class="absolute inset-0 bg-gradient-to-r from-blue-400/15 via-white/10 to-orange-400/15 rounded-2xl"
                  >
                  </div>

                  <!-- Text content with multiple text shadows -->
                  <div class="relative">
                    <span class="block text-xl xl:text-[20px] xl:leading-[28px] tracking-normal text-center text-white">
                      {t("word.hero.subtitle.1")}
                    </span>

                    <!-- Enhanced decorative elements -->
                    <div class="flex justify-center mt-4">
                      <div class="flex items-center space-x-2">
                        <div
                          class="w-8 h-0.5 bg-gradient-to-r from-transparent via-blue-400/80 to-blue-400/80 rounded-full"
                        >
                        </div>
                        <div
                          class="w-2 h-2 bg-white/80 rounded-full shadow-lg"
                          style="box-shadow: 0 0 10px rgba(255, 255, 255, 0.8);"
                        >
                        </div>
                        <div
                          class="w-8 h-0.5 bg-gradient-to-l from-transparent via-orange-400/80 to-orange-400/80 rounded-full"
                        >
                        </div>
                      </div>
                    </div>
                  </div>

                  <!-- Corner accents -->
                  <div class="absolute top-2 left-2 w-3 h-3 border-t-2 border-l-2 border-white/40 rounded-tl-lg"></div>
                  <div class="absolute top-2 right-2 w-3 h-3 border-t-2 border-r-2 border-white/40 rounded-tr-lg"></div>
                  <div class="absolute bottom-2 left-2 w-3 h-3 border-b-2 border-l-2 border-white/40 rounded-bl-lg">
                  </div>
                  <div class="absolute bottom-2 right-2 w-3 h-3 border-b-2 border-r-2 border-white/40 rounded-br-lg">
                  </div>
                </div>

                <!-- Enhanced floating particles -->
                <div
                  class="absolute -top-3 -left-3 w-3 h-3 bg-blue-400 rounded-full animate-pulse shadow-lg"
                  style="box-shadow: 0 0 15px rgba(59, 130, 246, 0.8);"
                >
                </div>
                <div
                  class="absolute -top-2 -right-4 w-2 h-2 bg-purple-400 rounded-full animate-pulse delay-300 shadow-lg"
                  style="box-shadow: 0 0 10px rgba(147, 51, 234, 0.8);"
                >
                </div>
                <div
                  class="absolute -bottom-3 -right-2 w-3 h-3 bg-orange-400 rounded-full animate-pulse delay-700 shadow-lg"
                  style="box-shadow: 0 0 15px rgba(251, 146, 60, 0.8);"
                >
                </div>
                <div
                  class="absolute -bottom-1 -left-4 w-1.5 h-1.5 bg-white rounded-full animate-pulse delay-1000 shadow-lg"
                  style="box-shadow: 0 0 8px rgba(255, 255, 255, 0.9);"
                >
                </div>
              </div>
            </BlurFade>
          </div>
        </div>
      </Fragment>
    </Hero>

    <!-- Actions positioned at bottom center on mobile, bottom right on larger screens -->
    <div
      class="absolute bottom-40 left-1/2 -translate-x-1/2 md:left-auto md:translate-x-0 md:right-4 lg:right-12 flex z-20 min-w-[324px]"
    >
      <BlurFade client:load delay={4.2} direction="up" inView>
        <FireButton
          id="show-video-btn"
          text={t("word.hero.cta.button")}
          variant="primary"
          size="small"
          icon="tabler:arrow-right"
        />
      </BlurFade>
    </div>
  </div>

  <WordList wordItems={wordItems} />

  <!-- Stats Widget ****************** -->

  <!-- <Stats
    subtitle={t("word.hero.subtitle")}
    stats={[
      { title: t("word.stats.title1"), amount: t("word.stats.amount1") },
      { title: t("word.stats.title2"), amount: t("word.stats.amount2") },
      { title: t("word.stats.title3"), amount: t("word.stats.amount3") },
      { title: t("word.stats.title4"), amount: t("word.stats.amount4") },
    ]}
  >
    <Fragment slot="title">
      {t("word.hero.title1")}
      <GradientText text={t("word.hero.title.span")} />
      {t("word.hero.title2")}
    </Fragment>
  </Stats> -->
</Layout>

<script>
  document.addEventListener("astro:page-load", () => {
    const heroVideo = document.getElementById("word-hero-video") as HTMLVideoElement;
    const showVideoBtn = document.getElementById("show-video-btn") as HTMLElement;
    let videoLoaded = false;
    let videoDisplayed = false;

    // Load video after 2 seconds but keep it hidden
    if (heroVideo) {
      setTimeout(() => {
        const videoSrc = heroVideo.dataset.src;

        if (videoSrc && !heroVideo.src) {
          heroVideo.src = videoSrc;
          heroVideo.preload = "metadata";
          heroVideo.load();
        }

        // Set up event listener for when video has loaded enough data
        const handleVideoLoaded = () => {
          videoLoaded = true;
          console.log("Video loaded and ready to display");
          heroVideo.removeEventListener("loadeddata", handleVideoLoaded);
        };

        heroVideo.addEventListener("loadeddata", handleVideoLoaded);

        // Fallback: if video is already loaded (cached)
        if (heroVideo.readyState >= 2) {
          handleVideoLoaded();
        }
      }, 2000);
    }

    // Function to display video and handle auto-scroll
    const displayVideo = () => {
      if (!videoLoaded || videoDisplayed) return;

      videoDisplayed = true;

      // Fade in the video and gradient
      heroVideo.classList.remove("opacity-0");
      heroVideo.classList.add("opacity-100");

      // Start playing the video
      const playPromise = heroVideo.play();

      if (playPromise !== undefined) {
        playPromise
          .then(() => {
            console.log("Video started successfully");
          })
          .catch((error) => {
            console.log("Video autoplay failed:", error);
          });
      }

      // Auto-scroll to #word-list after 2 seconds of video display
      setTimeout(() => {
        const wordListSection = document.getElementById("word-list");
        if (wordListSection) {
          wordListSection.scrollIntoView({
            behavior: "smooth",
            block: "start",
          });
        }
      }, 3200);
    };

    // Add click event listener to fire button
    if (showVideoBtn) {
      showVideoBtn.addEventListener("click", (e) => {
        e.preventDefault();
        displayVideo();
      });
    }
  });
</script>
