---
import logoUrl from "~/assets/images/default.jpg";
import { getImage } from "astro:assets";
import { SITE } from "astrowind:config";
import { useTranslations } from "~/i18n/utils";
import type { MetaDataStructuredData } from "~/types";

interface Props {
  lang?: "fi" | "en";
  pageSpecificSchema?: MetaDataStructuredData;
}

const { lang = "en", pageSpecificSchema } = Astro.props;

const t = useTranslations(lang);

const optimizedLogo = await getImage({ src: logoUrl });

// Organization Schema
const organizationSchema = {
  "@context": "https://schema.org",
  "@type": "Organization",
  "@id": SITE.site + "#organization",
  name: "Flame the Freeze",
  alternateName: t("schema.organization.alternateName"),
  url: SITE.site,
  logo: {
    "@type": "ImageObject",
    url: new URL(optimizedLogo.src, SITE.site).toString(),
    width: "640",
    height: "640",
  },
  description: t("schema.organization.description"),
  foundingDate: "2024",
  keywords: t("schema.organization.keywords"),
  sameAs: ["https://www.youtube.com/@flamethefreeze2613"],
  contactPoint: {
    "@type": "ContactPoint",
    contactType: t("schema.organization.customerService"),
    availableLanguage: t("schema.organization.availableLanguage"),
  },
};

// Website Schema
const websiteSchema = {
  "@context": "https://schema.org",
  "@type": "WebSite",
  "@id": SITE.site + "#website",
  url: SITE.site,
  name: t("schema.website.name"),
  description: t("schema.website.description"),
  publisher: {
    "@id": SITE.site + "#organization",
  },
  potentialAction: {
    "@type": "SearchAction",
    target: {
      "@type": "EntryPoint",
      urlTemplate: SITE.site + "/search?q={search_term_string}",
    },
    "query-input": "required name=search_term_string",
  },
};

// WebPage Schema
const webPageSchema = {
  "@context": "https://schema.org",
  "@type": "WebPage",
  "@id": SITE.site + "#webpage",
  url: SITE.site,
  name: t("schema.webpage.name"),
  description: t("schema.webpage.description"),
  isPartOf: {
    "@id": SITE.site + "#website",
  },
  about: {
    "@type": "Thing",
    name: t("schema.website.about.name"),
    description: t("schema.website.about.description"),
  },
  mentions: [
    {
      "@type": "Thing",
      name: t("schema.website.mentions.1.name"),
      description: t("schema.website.mentions.1.description"),
    },
    {
      "@type": "Thing",
      name: t("schema.website.mentions.2.name"),
      description: t("schema.website.mentions.2.description"),
    },
    {
      "@type": "Thing",
      name: t("schema.website.mentions.3.name"),
      description: t("schema.website.mentions.3.description"),
    },
  ],
  mainEntity: {
    "@type": "Thing",
    name: t("schema.website.mainEntity.name"),
    description: t("schema.website.mainEntity.description"),
  },
};

// Article Schema for the main content
const articleSchema = {
  "@context": "https://schema.org",
  "@type": "Article",
  "@id": SITE.site + "#article",
  headline: t("schema.article.headline"),
  description: t("schema.article.description"),
  author: {
    "@type": "Organization",
    name: t("schema.article.author.name"),
    url: SITE.site,
  },
  publisher: {
    "@id": SITE.site + "#organization",
  },
  datePublished: "2024-01-01",
  dateModified: new Date().toISOString().split("T")[0],
  mainEntityOfPage: {
    "@id": SITE.site + "#webpage",
  },
  keywords: t("schema.article.keywords"),
  about: [
    {
      "@type": "Thing",
      name: t("schema.article.about.1.name"),
      description: t("schema.article.about.1.description"),
    },
    {
      "@type": "Thing",
      name: t("schema.article.about.2.name"),
      description: t("schema.article.about.2.description"),
    },
  ],
  mentions: [
    {
      "@type": "Person",
      name: t("schema.article.mentions.1.name"),
      description: t("schema.article.mentions.1.description"),
    },
    {
      "@type": "Person",
      name: t("schema.article.mentions.2.name"),
      description: t("schema.article.mentions.2.description"),
    },
  ],
};

// Combine all schemas
const schemas = [organizationSchema, websiteSchema, webPageSchema, articleSchema, pageSpecificSchema].filter(Boolean);

const combinedSchema = {
  "@context": "https://schema.org",
  "@graph": schemas,
};
---

<script type="application/ld+json" set:html={JSON.stringify(combinedSchema)} />
