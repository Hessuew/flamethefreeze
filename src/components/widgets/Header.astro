---
import ToggleMenu from "~/components/common/ToggleMenu.astro";
import Logo from "~/components/Logo.astro";
import HeaderNavigation from "~/components/widgets/HeaderNavigation.astro";
import { getHomePermalink, getPermalink, trimSlash } from "~/utils/permalinks";
import type { ImageMetadata } from "astro";
import { Icon } from "astro-icon/components";
import LanguagePicker from "~/components/common/LanguagePicker.astro";
import { useTranslations } from "~/i18n/utils";
import { twMerge } from "tailwind-merge";
import type { ui } from "~/i18n/ui";

interface Link {
  text?: string;
  description?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
  image?: {
    src: ImageMetadata;
    alt: string;
  };
}

export interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  classes?: Record<string, string>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  position?: string;
  lang?: "fi" | "en";
}

const {
  id = "header",
  links = [],
  isSticky = false,
  isDark = false,
  isFullWidth = false,
  position = "right",
  classes = {},
  lang,
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;

const { nav: navClass = "" } = classes;

const t = useTranslations(lang || "en");
---

<header
  class:list={[
    { sticky: isSticky, relative: !isSticky, dark: isDark },
    "top-0 z-50 flex-none mx-auto w-full transition-all duration-500 ease-in-out",
  ]}
  {...isSticky ? { "data-aw-sticky-header": true } : {}}
  {...id ? { id } : {}}
>
  <!-- Enhanced background with gradient overlay -->
  <div class="absolute inset-0 bg-gradient-to-r from-primary/5 via-accent/3 to-primary/5"></div>
  <div
    class:list={[
      "relative text-default py-1 px-3 lg:px-6 xl:py-[4px] xl:px-[24px] mx-auto w-full",
      {
        "lg:flex lg:justify-between": position !== "center",
      },
      {
        "lg:grid lg:grid-cols-3 lg:items-center": position === "center",
      },
      {
        "max-w-7xl xl:max-w-[1280px]": !isFullWidth,
      },
    ]}
  >
    <div class:list={[{ "mr-auto rtl:mr-0 rtl:ml-auto": position === "right" }, "flex justify-between"]}>
      <a
        class="flex items-center justify-center relative py-2 lg:py-0 group transition-all duration-300 hover:scale-105"
        href={getHomePermalink()}
      >
        <div class="relative">
          <div
            class="absolute inset-0 bg-gradient-to-r from-primary/20 to-accent/20 rounded-full blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"
          >
          </div>
          <Logo />
        </div>
      </a>
      <div class="flex items-center lg:hidden">
        <ToggleMenu />
      </div>
    </div>
    <nav
      class={twMerge(
        navClass,
        "items-center w-full lg:w-auto hidden lg:flex lg:mx-5 xl:mx-[20px] text-default overflow-y-auto overflow-x-hidden lg:overflow-y-visible lg:overflow-x-auto lg:justify-self-center"
      )}
      aria-label="Main navigation"
    >
      <div class="flex justify-between items-center py-2 px-6 xl:py-[8px] xl:px-[24px] lg:hidden">
        <LanguagePicker />
      </div>
      <ul
        class="flex flex-col lg:flex-row lg:self-center w-full lg:w-auto text-xl lg:text-[0.9375rem] tracking-[0.01rem] xl:text-[15px] xl:tracking-[0.16px] font-medium lg:justify-center"
      >
        {
          links.map(({ text, href, links, icon, description }, index) => (
            <li class={links?.length ? "dropdown" : ""}>
              {links?.length ? (
                <>
                  <button
                    type="button"
                    class={twMerge(
                      "w-full px-2.5 py-3 xl:px-[10px] xl:py-[12px] flex items-center whitespace-nowrap justify-between border-b lg:border-b-0 border-gray-800 group"
                    )}
                    data-nav-button
                    id={`nav-button-${index}`}
                    data-mobile-toggle={`mobile-section-${index}`}
                  >
                    <div class="flex items-center">
                      <Icon
                        name="tabler:chevron-down"
                        class="w-5 h-5 mr-2 text-white transition-transform duration-200 lg:hidden mobile-chevron"
                      />

                      <span class="font-bold lg:font-semibold text-transparent bg-clip-text bg-gradient-to-r from-white to-white group-hover:from-orange-600 group-hover:to-yellow-500">
                        {text ? t(text as keyof typeof ui.en) : text}
                        <Icon
                          name="tabler:point"
                          class="text-white transition-transform duration-300 transform group-hover:scale-150 group-hover:text-orange-400 w-3.5 h-3.5 ml-0.5 xl:w-[14px] xl:h-[14px] xl:ml-[2px] rtl:ml-0 rtl:mr-0.5 hidden lg:inline"
                        />
                      </span>
                    </div>
                  </button>
                  <div
                    class="mobile-submenu hidden lg:hidden overflow-hidden transition-all duration-300 ease-in-out"
                    data-mobile-content={`mobile-section-${index}`}
                  >
                    <div class="w-full">
                      <ul class="py-2 space-y-2">
                        {links.map(({ text: text2, href: href2, icon, description }) => (
                          <li class="block lg:hidden">
                            <a
                              class:list={["py-2 px-3 block group", { "aw-link-active": href2 === currentPath }]}
                              href={getPermalink(`${lang}/${href2}`)}
                            >
                              <div class="flex items-center gap-2">
                                {icon && (
                                  <Icon name={icon} class="w-5 h-5 mt-0.5 text-white group-active:text-orange-600" />
                                )}
                                <div>
                                  <div class="font-medium text-transparent bg-clip-text bg-gradient-to-r from-white to-white group-active:from-orange-600 group-active:to-yellow-500">
                                    {text2 ? t(text2 as keyof typeof ui.en) : text2}
                                  </div>
                                  {description && (
                                    <div class="text-sm text-gray-400">
                                      {description ? t(description as keyof typeof ui.en) : description}
                                    </div>
                                  )}
                                </div>
                              </div>
                            </a>
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </>
              ) : (
                <a
                  class:list={[
                    "font-bold lg:font-normal ml-[16px] lg:pl-0 px-2.5 xl:px-[10px] py-3 xl:py-[12px] flex items-center whitespace-nowrap relative group transition-all duration-300 hover:text-white",
                    {
                      "text-primary after:w-full": href === currentPath,
                      "hover:text-primary after:w-0 hover:after:w-full": href !== currentPath,
                    },
                    "after:absolute after:bottom-0 after:left-1/2 after:-translate-x-1/2 after:h-0.5 after:bg-gradient-to-r after:from-primary after:to-accent after:transition-all after:duration-300",
                  ]}
                  href={href}
                >
                  <div class="hidden lg:flex">{text ? t(text as keyof typeof ui.en) : text}</div>
                  <div class="flex lg:hidden items-center gap-3 active:text-primary pl-0">
                    {icon && <Icon name={icon} class="w-5 h-5 mt-0.5" />}
                    <div>
                      <div class="font-bold text-white">{text}</div>
                      {description && <div class="text-sm text-gray-400">{description}</div>}
                    </div>
                  </div>
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </nav>
    <HeaderNavigation lang={lang} links={links.filter((link) => link.links?.length)} currentPath={currentPath} />
    <div
      class:list={[
        { "ml-auto rtl:ml-0 rtl:mr-auto": position === "left" },
        "hidden lg:self-center lg:flex items-center lg:mb-0 fixed w-full lg:w-auto lg:static justify-end left-0 rtl:left-auto rtl:right-0 bottom-0 p-3 lg:p-0 lg:justify-self-end z-50",
      ]}
    >
      <div class="hidden lg:flex flex-none items-center w-full lg:w-auto gap-3 xl:gap-[12px]">
        <LanguagePicker />
      </div>
    </div>
  </div>
</header>

<script>
  function setupMobileMenu(): void {
    const toggleButtons = document.querySelectorAll("[data-mobile-toggle]");

    // Prevent theme toggle from closing the mobile menu
    // Target the entire toggle theme component and all its children
    const themeToggleContainer = document.querySelector("nav .group.relative");
    if (themeToggleContainer) {
      // Stop propagation on the entire container
      themeToggleContainer.addEventListener("click", (e) => {
        e.stopPropagation();
      });

      // Also target specific elements to ensure complete coverage
      const themeToggleElements = themeToggleContainer.querySelectorAll("*");
      themeToggleElements.forEach((element) => {
        element.addEventListener("click", (e) => {
          e.stopPropagation();
        });
      });
    }

    // Track which menu is currently open
    let currentOpenMenu: HTMLElement | null = null;

    // Function to safely toggle menu items
    function toggleMenuItem(
      button: Element | null,
      content: HTMLElement,
      chevron: Element | null,
      forceClose?: boolean
    ): void {
      // Determine if we should show or hide
      let shouldShow = true;

      if (forceClose === true) {
        // Force close mode
        shouldShow = false;
      } else if (content === currentOpenMenu) {
        // If this is already open, we're closing it
        shouldShow = false;
      } else {
        // Otherwise we're opening it
        shouldShow = true;
      }

      if (shouldShow) {
        // Update tracking of open menu
        currentOpenMenu = content;

        // Show content
        content.classList.remove("hidden");
        content.classList.add("border-b", "lg:border-b-0", "border-gray-800");
        // Set initial height to 0 then animate to full height
        content.style.maxHeight = "0px";
        // Force browser to recognize the change before animating
        void window.getComputedStyle(content).maxHeight;
        // Now set the actual height
        requestAnimationFrame(() => {
          content.style.maxHeight = `${content.scrollHeight}px`;
        });
        chevron?.classList.add("rotate-180");
      } else {
        // Update tracking - if we're closing the current open menu, set to null
        if (content === currentOpenMenu) {
          currentOpenMenu = null;
        }

        // Hide content
        content.style.maxHeight = "0px";
        chevron?.classList.remove("rotate-180");
        content.classList.remove("border-b", "lg:border-b-0", "border-gray-800");
        // Add hidden class after transition completes
        setTimeout(() => {
          content.classList.add("hidden");
        }, 300);
      }
    }

    // The toggleMenuItem function handles all menu state management

    toggleButtons.forEach((button) => {
      const sectionId = button.getAttribute("data-mobile-toggle");
      if (!sectionId) return;

      const content = document.querySelector(`[data-mobile-content="${sectionId}"]`) as HTMLElement | null;
      const chevron = button.querySelector(".mobile-chevron");

      if (button && content) {
        button.addEventListener("click", (e) => {
          // Only handle click for mobile view
          if (window.innerWidth >= 1024) return;

          // Stop event propagation to prevent the menu from closing
          e.stopPropagation();
          e.preventDefault();

          // Toggle this menu item - no need to close other menus as toggleMenuItem handles this
          toggleMenuItem(button, content, chevron);
        });
      }
    });
  }

  // Initialize when the DOM is loaded
  document.addEventListener("DOMContentLoaded", setupMobileMenu);

  // Handle window resize to ensure mobile menu stays open when switching themes
  window.addEventListener("resize", () => {
    // This is a no-op function that ensures the mobile menu state is preserved during theme changes
  });

  // Also initialize when Astro view transitions are complete
  document.addEventListener("astro:page-load", setupMobileMenu);
</script>
