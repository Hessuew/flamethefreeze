---
import type { Content as Props } from "~/types";
import Headline from "../ui/Headline.astro";
import WidgetWrapper from "../ui/WidgetWrapper.astro";
import Image from "~/components/common/Image.astro";
import Button from "~/components/ui/Button.astro";
import Testimonials from "~/components/widgets/Testimonials.astro";
import ItemGrid from "../ui/ItemGrid.astro";
import { twMerge } from "tailwind-merge";

const {
  title = await Astro.slots.render("title"),
  subtitle = await Astro.slots.render("subtitle"),
  tagline,
  content = await Astro.slots.render("content"),
  callToAction,
  items = [],
  columns,
  image = await Astro.slots.render("image"),
  isReversed = false,
  isAfterContent = false,
  defaultIcon,
  testimonial,
  bottom,
  whiteText = false,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render("bg"),
  noAnimation = false,
} = Astro.props;

const {
  icon: defaultIconClass = "flex h-7 w-7 xl:h-[32px] xl:w-[32px] items-center justify-center rounded-full bg-green-600 dark:bg-green-700 text-gray-50 p-1 xl:p-[4px]",
  iconClass,
  iconTitle,
} = classes;
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`max-w-7xl xl:max-w-[1280px] mx-auto ${isAfterContent ? "pt-0 md:pt-0 lg:pt-0" : ""} ${classes?.container ?? ""}`}
  bg={bg}
  noAnimation={noAnimation}
>
  <!-- <Headline
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    classes={{
      container: twMerge("max-w-xl sm:mx-auto lg:max-w-2xl", classes.headline),
      title: twMerge(
        "text-4xl md:text-5xl font-bold leading-tighter tracking-tighter mb-4 font-heading",
        whiteText && "text-white"
      ),
      subtitle: twMerge(
        "max-w-3xl mx-auto sm:text-center text-xl text-muted dark:text-slate-400",
        whiteText && "text-white"
      ),
    }}
  /> -->
  <Headline
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    classes={{
      container: twMerge("max-w-xl sm:mx-auto lg:max-w-xl xl:max-w-[576px]", classes.headline),
      title: twMerge(
        "text-4xl md:text-5xl xl:text-[48px] font-bold tracking-tighter mb-4 xl:mb-[16px] font-heading max-w-5xl xl:max-w-[980px] mx-auto",
        classes.title
      ),
      subtitle: twMerge(
        "sm:text-center text-xl xl:text-[20px] xl:leading-[28px] text-muted dark:text-slate-400",
        classes.subtitleClass
      ),
    }}
  />
  <div class="mx-auto max-w-5xl xl:max-w-[1280px] p-4 md:px-8 xl:px-[32px]">
    <div class={`md:flex ${isReversed ? "md:flex-row-reverse" : ""} md:gap-16 xl:gap-[64px]`}>
      <div class="md:basis-1/2 self-center">
        {content && <div class="mb-12 xl:mb-[48px] text-lg dark:text-slate-400" set:html={content} />}

        {
          callToAction && (
            <div class="mt-[-40px] mb-8 xl:mb-[32px] text-primary">
              <Button variant="link" {...callToAction} />
            </div>
          )
        }

        <ItemGrid
          items={items}
          columns={columns}
          defaultIcon={defaultIcon}
          classes={{
            container: `gap-y-4 md:gap-y-8 xl:gap-y-[24px]`,
            panel: "max-w-none",
            title: twMerge(
              "text-lg text xl:text-[18px] leading-6 xl:leading-[24px] font-medium dark:text-white ml-2 xl:ml-[8px] rtl:ml-0 rtl:mr-2 xl:mr-[8px]",
              iconTitle
            ),
            description: "text-muted dark:text-slate-400 ml-2 xl:ml-[8px] rtl:ml-0 rtl:mr-2 xl:mr-[8px]",
            icon: twMerge(defaultIconClass, iconClass),
            action:
              "text-lg xl:text-[18px] leading-6 xl:leading-[24px] font-medium dark:text-white ml-2 xl:ml-[8px] rtl:ml-0 rtl:mr-2 xl:mr-[8px]",
          }}
        />
      </div>
      <div aria-hidden="true" class="mt-10 md:mt-0 md:basis-1/2">
        {
          image && (
            <div class="relative m-auto max-w-4xl xl:max-w-[896px] h-full">
              {typeof image === "string" ? (
                <>
                  <Fragment set:html={image} />
                  {bottom && (
                    <div class={twMerge("text-center self-baseline pt-10 xl:pt-[40px]", classes.bottom)}>
                      <p
                        aria-label="Title for content bottom area"
                        class={twMerge("text-2xl xl:text-[24px] xl:leading-[32px]", whiteText && "text-white")}
                        set:html={bottom.title}
                      />
                      <p
                        aria-label="Subtitle for content bottom area"
                        class={twMerge(
                          "pt-4 xl:pt-[16px] text-muted text-xl xl:text-[20px] xl:leading-[28px]",
                          whiteText && "text-white"
                        )}
                        set:html={bottom.subtitle}
                      />
                      {bottom.links &&
                        bottom.links.map(({ title, link }) => (
                          <p
                            aria-label="Bottom area text"
                            class={twMerge(
                              "pt-4 xl:pt-[16px] text-xl xl:text-[20px] xl:leading-[28px]",
                              whiteText && "text-white"
                            )}
                          >
                            {title}:
                            <a
                              aria-label="Bottom area link"
                              class={twMerge("text-blue-700 hover:underline break-all")}
                              href={link}
                              target="_blank"
                            >
                              {link}
                            </a>
                          </p>
                        ))}
                    </div>
                  )}
                </>
              ) : (
                <Image
                  class="mx-auto w-full rounded-lg xl:rounded-[8px] bg-gray-500 shadow-lg"
                  width={500}
                  height={500}
                  widths={[400, 768]}
                  sizes="(max-width: 768px) 100vw, 432px"
                  layout="responsive"
                  {...image}
                />
              )}
            </div>
          )
        }
      </div>
    </div>
    {
      testimonial && (
        <Testimonials
          classes={{
            name: twMerge(whiteText && "text-white"),
            testimonial: twMerge(whiteText && "text-white"),
          }}
          columns={columns}
          testimonials={testimonial}
        />
      )
    }
    {bottom && <div class={twMerge("text-center border-b pb-4 xl:pb-[16px] border-neutral-400", classes.bottom)} />}
  </div>
</WidgetWrapper>
