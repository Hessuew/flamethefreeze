---
import { twMerge } from "tailwind-merge";
import WidgetWrapper from "~/components/ui/WidgetWrapper.astro";
import type { ContentList as Props } from "~/types";
import Headline from "~/components/ui/Headline.astro";

export interface ContentDescription {
  text: string;
  subtitle?: boolean;
}

export interface ContentItem {
  title: string;
  subtitle?: string;
  question?: string;
  description: ContentDescription[];
  color: "orange" | "blue" | "green" | "purple" | "red" | "yellow" | "pink" | "indigo";
  emoji?: string;
}

const {
  title = await Astro.slots.render("title"),
  subtitle = await Astro.slots.render("subtitle"),
  tagline = await Astro.slots.render("tagline"),
  contentItems,
  containerClass = "",
  headlineType,

  id = "content-list",
  classes = {},
} = Astro.props;

// Enhanced color theme mappings with solid backgrounds for performance
const colorThemes = {
  orange: {
    gradient: "from-orange-500 to-red-600",
    solidBg: "bg-orange-500/10",
    border: "border-orange-500/30",
    borderHover: "hover:border-orange-500/60",
    accent: "bg-orange-500",
    textAccent: "text-orange-400",
    iconBg: "bg-gradient-to-br from-orange-500 to-red-600",
  },
  blue: {
    gradient: "from-blue-500 to-purple-600",
    solidBg: "bg-blue-500/10",
    border: "border-blue-500/30",
    borderHover: "hover:border-blue-500/60",
    accent: "bg-blue-500",
    textAccent: "text-blue-400",
    iconBg: "bg-gradient-to-br from-blue-500 to-purple-600",
  },
  green: {
    gradient: "from-green-500 to-teal-600",
    solidBg: "bg-green-500/10",
    border: "border-green-500/30",
    borderHover: "hover:border-green-500/60",
    accent: "bg-green-500",
    textAccent: "text-green-400",
    iconBg: "bg-gradient-to-br from-green-500 to-teal-600",
  },
  purple: {
    gradient: "from-purple-500 to-pink-600",
    solidBg: "bg-purple-500/10",
    border: "border-purple-500/30",
    borderHover: "hover:border-purple-500/60",
    accent: "bg-purple-500",
    textAccent: "text-purple-400",
    iconBg: "bg-gradient-to-br from-purple-500 to-pink-600",
  },
  red: {
    gradient: "from-red-500 to-red-800",
    solidBg: "bg-red-500/10",
    border: "border-red-500/30",
    borderHover: "hover:border-red-500/60",
    accent: "bg-red-500",
    textAccent: "text-red-400",
    iconBg: "bg-gradient-to-br from-red-500 to-red-800",
  },
  yellow: {
    gradient: "from-yellow-500 to-orange-600",
    solidBg: "bg-yellow-500/10",
    border: "border-yellow-500/30",
    borderHover: "hover:border-yellow-500/60",
    accent: "bg-yellow-500",
    textAccent: "text-yellow-400",
    iconBg: "bg-gradient-to-br from-yellow-500 to-orange-600",
  },
  pink: {
    gradient: "from-red-500 to-pink-600",
    solidBg: "bg-pink-500/10",
    border: "border-pink-500/30",
    borderHover: "hover:border-pink-500/60",
    accent: "bg-pink-500",
    textAccent: "text-pink-400",
    iconBg: "bg-gradient-to-br from-red-500 to-pink-600",
  },
  indigo: {
    gradient: "from-indigo-500 to-blue-800",
    solidBg: "bg-indigo-500/10",
    border: "border-indigo-500/30",
    borderHover: "hover:border-indigo-500/60",
    accent: "bg-indigo-500",
    textAccent: "text-indigo-400",
    iconBg: "bg-gradient-to-br from-indigo-500 to-blue-800",
  },
};
---

<WidgetWrapper id={id} animated={false} containerClass={twMerge("py-16 xl:py-[164px]", containerClass)}>
  <Headline
    headlineType={headlineType}
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    classes={classes?.headline as Record<string, string>}
  />

  <div class="max-w-6xl xl:max-w-[1152px] mx-auto">
    <div class="space-y-16 xl:space-y-[64px]">
      {
        contentItems.map((item, index) => {
          const theme = colorThemes[item.color];
          const isLeft = index % 2 !== 0; // 1st left (0), 2nd right (1), 3rd left (2)

          return (
            <div class="group relative">
              <div class="flex flex-col sm:flex-row items-start space-x-6 xl:space-x-[24px] space-y-6 sm:space-y-0">
                <div class="flex-1">
                  <div
                    class={`relative bg-gradient-to-br from-gray-800/60 via-gray-800/50 to-gray-900/60 rounded-2xl xl:rounded-[20px] p-2 border border-gray-600/40 ${theme.borderHover} transition-all duration-500 overflow-hidden`}
                  >
                    <div
                      class={`flex flex-col lg:flex-row ${isLeft ? "lg:flex-row-reverse lg:pr-10 xl:pr-[40px]" : " lg:pl-10 xl:pl-[40px]"} gap-6 xl:gap-[24px] lg:items-center`}
                    >
                      {/* Large Number Badge Section */}
                      <div class="flex justify-center lg:justify-start flex-shrink-0">
                        <div class="relative overflow-hidden rounded-xl xl:rounded-[12px] transition-all duration-500 w-24 h-24 md:w-60 md:h-60 xl:w-[240px] xl:h-[240px]">
                          <div class={`w-full h-full ${theme.iconBg} flex items-center justify-center rounded-full`}>
                            <div class="text-center">
                              <div class="text-white text-5xl md:text-7xl xl:text-8xl xl:text-[96px] font-bold drop-shadow-2xl">
                                {index + 1}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>

                      {/* Content Section */}
                      <div class="flex flex-col flex-1 p-8 xl:p-10 relative">
                        {/* Decorative corner elements */}
                        <div class="absolute top-4 right-4 w-8 h-8 border-t-2 border-r-2 border-white/10 rounded-tr-lg" />
                        <div class="absolute bottom-4 left-4 w-8 h-8 border-b-2 border-l-2 border-white/10 rounded-bl-lg" />

                        {/* Header Section */}
                        <div class="mb-8 xl:mb-[32px] relative">
                          <div class="flex items-center gap-3 xl:gap-[12px]">
                            {/* <span class="text-4xl xl:text-[32px] drop-shadow-lg">{item.emoji}</span> */}
                            <div
                              class={`w-12 mb-4 xl:mb-[16px] h-0.5 bg-gradient-to-r ${theme.gradient} rounded-full opacity-60`}
                            />
                          </div>

                          <p
                            class="text-2xl xl:text-[28px] xl:leading-[36px] font-bold text-white mb-3 xl:mb-[12px] drop-shadow-sm"
                            set:html={item.title}
                          />

                          <p
                            class="text-base xl:text-[16px] xl:leading-[24px] text-white mb-3 xl:mb-[12px]"
                            set:html={item.subtitle}
                          />

                          <p
                            class="text-xl xl:text-[20px] xl:leading-[28px] text-blue-200 font-medium tracking-wide"
                            set:html={item.question}
                          />
                        </div>

                        {/* Beautiful Description Section */}
                        <div class="relative">
                          <div>
                            {/* Enhanced Description Content */}
                            <div class="space-y-4 xl:space-y-5">
                              {item.description.map((desc) => (
                                <div class="relative">
                                  {desc.subtitle ? (
                                    <div class="mb-6 xl:mb-8">
                                      <div
                                        class={`border border-white/30 rounded-xl p-6 xl:p-8 bg-gradient-to-br from-gray-800/40 to-gray-900/60`}
                                      >
                                        <div class="flex items-start gap-4">
                                          <div
                                            class={`w-1 h-full min-h-[60px] bg-gradient-to-b ${theme.gradient} rounded-full flex-shrink-0 mt-1`}
                                          />
                                          <div class="flex-1">
                                            <h4 class="text-white text-base xl:text-lg leading-relaxed xl:leading-loose font-normal tracking-wide">
                                              <span set:html={desc.text} />
                                            </h4>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  ) : (
                                    <div class="flex items-center gap-4 xl:gap-5 group/item">
                                      {/* <div
                                        class={`w-2 h-2 ${theme.accent} rounded-full flex-shrink-0 mt-2.5 shadow-sm group-hover/item:scale-125 transition-transform duration-300`}
                                      /> */}
                                      <span class="text-2xl xl:text-[24px]">{desc.emoji}</span>
                                      <div class="flex-1">
                                        <p
                                          class="text-gray-100 text-lg xl:text-[18px] xl:leading-[28px] leading-relaxed font-light group-hover/item:text-white transition-colors duration-300"
                                          set:html={desc.text}
                                        />
                                      </div>
                                    </div>
                                  )}
                                </div>
                              ))}
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          );
        })
      }
    </div>
  </div>
</WidgetWrapper>
