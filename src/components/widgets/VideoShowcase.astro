---
import Headline from "~/components/ui/Headline.astro";
import WidgetWrapper from "~/components/ui/WidgetWrapper.astro";
import Image from "~/components/common/Image.astro";
import { Icon } from "astro-icon/components";
import type { VideoShowcase as Props } from "~/types";

const {
  title = await Astro.slots.render("title"),
  subtitle = await Astro.slots.render("subtitle"),
  tagline = await Astro.slots.render("tagline"),
  videos = [],
  id,
  isDark = false,
  classes = {},
  type = 2,
  bg = await Astro.slots.render("bg"),
} = Astro.props;
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`max-w-7xl xl:max-w-[1280px] ${classes?.container ?? ""}`}
  bg={bg}
>
  <Headline
    type={type}
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    classes={classes?.headline as Record<string, string>}
  />

  <div class="relative mt-12 xl:mt-[48px]">
    <!-- Video Grid Container -->
    <div class="video-showcase-container overflow-hidden">
      <div class="video-showcase-grid flex gap-6 xl:gap-[24px] transition-transform duration-500">
        {videos.map((video, index) => (
          <div class="video-card flex-shrink-0 w-[calc(50%-12px)] xs:w-[calc(40%-12px)] sm:w-[calc(30%-12px)] xl:w-[calc(30%-16px)]">
            <a href={video.link} target="_blank" class="group block">
              <div class="relative overflow-hidden rounded-xl xl:rounded-[12px] bg-slate-800 hover:scale-[1.02] transition-all duration-300 shadow-lg hover:shadow-xl">
                <Image
                  class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500"
                  src={video.src}
                  alt={video.alt || `Video ${index + 1}`}
                  width={440}
                  height={440}
                  objectPosition={video?.objectPosition || "top top"}
                  loading="lazy"
                />
                
                <!-- Play Button Overlay -->
                <div class="absolute inset-0 flex items-center justify-center bg-black/20 group-hover:bg-black/30 transition-colors duration-300">
                  <div class="w-16 h-16 xl:w-[64px] xl:h-[64px] rounded-full flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                    <Icon name="tabler:play" class="w-8 h-8 xl:w-[32px] xl:h-[32px] text-white/70 ml-1" />
                  </div>
                </div>
              </div>

              <!-- Video Info (Always Visible) -->
              <div class="mt-4 xl:mt-[16px] space-y-2 xl:space-y-[8px]">
                <div class="flex items-center gap-2">
                  <h3 class="text-md md:text-lg xl:text-[18px] xl:leading-[24px] font-semibold text-default transition-colors duration-300" set:html={video.title}></h3>
                  <!-- Animated Arrow on Hover -->
                  <div class="arrow-container opacity-0 group-hover:opacity-100 transition-all duration-300 transform translate-x-[-8px] group-hover:translate-x-0">
                    <Icon name="tabler:arrow-right" class="w-5 h-5 xl:w-[20px] xl:h-[20px] text-white" />
                  </div>
                </div>

                {video.description && (
                  <p class="text-sm xl:text-[14px] xl:leading-[20px] text-muted" set:html={video.description} />
                )}

                <p class="text-sm xl:text-[14px] xl:leading-[20px] text-muted pt-8 xl:pt-[18px]">Topics:</p>

                {video.features && video.features.length > 0 && (
                  <ul class="space-y-1 xl:space-y-[4px]">
                    {video.features.map((feature) => (
                      <li class="flex items-center text-sm xl:text-[14px] xl:leading-[20px] text-muted">
                        <Icon name="tabler:check" class="w-4 h-4 xl:w-[16px] xl:h-[16px] text-white mr-2 xl:mr-[8px] flex-shrink-0" />
                        {feature}
                      </li>
                    ))}
                  </ul>
                )}
              </div>
            </a>
          </div>
        ))}
      </div>
    </div>

    <!-- Navigation Arrows (responsive and always tabbable) -->
    <div class="navigation-controls absolute inset-y-0 right-0 flex items-center z-10">
      <!-- Previous Arrow -->
      <button 
        class="nav-arrow nav-prev absolute right-16 sm:right-20 xl:right-[80px] w-10 h-10 sm:w-12 sm:h-12 xl:w-[48px] xl:h-[48px] bg-white/90 backdrop-blur-sm rounded-full shadow-lg hover:shadow-xl flex items-center justify-center transition-all duration-300 hover:scale-110 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
        aria-label="View previous videos"
        tabindex="0"
      >
        <Icon name="tabler:chevron-left" class="w-5 h-5 sm:w-6 sm:h-6 xl:w-[24px] xl:h-[24px] text-black" />
      </button>
      
      <!-- Next Arrow -->
      <button 
        class="nav-arrow nav-next absolute right-0 translate-x-1 sm:translate-x-2 xl:translate-x-[8px] w-10 h-10 sm:w-12 sm:h-12 xl:w-[48px] xl:h-[48px] bg-white/90 backdrop-blur-sm rounded-full shadow-lg hover:shadow-xl flex items-center justify-center transition-all duration-300 hover:scale-110 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2"
        aria-label="View more videos"
        tabindex="0"
      >
        <Icon name="tabler:chevron-right" class="w-5 h-5 sm:w-6 sm:h-6 xl:w-[24px] xl:h-[24px] text-black" />
      </button>
    </div>
  </div>
</WidgetWrapper>

<style>
  .video-showcase-container {
    width: calc(100% + 40px); 
    margin-right: -40px;
    @media (min-width: 1280px) {
      width: calc(100% + 60px); 
      margin-right: -60px;
    }
  }

  .arrow-container {
    animation: slideIn 0.3s ease-out;
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateX(-8px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .video-showcase-grid {
    scroll-behavior: smooth;
  }

  .nav-arrow {
    opacity: 0.8;
    transition: all 0.3s ease;
  }

  .nav-arrow:hover {
    opacity: 1;
    transform: scale(1.1);
  }

  .nav-arrow:focus {
    opacity: 1;
  }

  .nav-arrow.disabled {
    opacity: 0.3;
    pointer-events: none;
    cursor: not-allowed;
  }

  @media (max-width: 639px) {
    .navigation-controls {
      right: -8px;
    }
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const prevArrow = document.querySelector('.nav-prev') as HTMLButtonElement;
    const nextArrow = document.querySelector('.nav-next') as HTMLButtonElement;
    const grid = document.querySelector('.video-showcase-grid') as HTMLElement;
    
    if (prevArrow && nextArrow && grid) {
      let currentIndex = 0;
      const totalVideos = grid.children.length;
      
      // Calculate visible videos and max index based on screen size
      function getVisibleVideosCount(): number {
        const screenWidth = window.innerWidth;
        if (screenWidth >= 1280) return 3; // xl screens
        if (screenWidth >= 640) return 3;  // sm screens
        return 2; // mobile screens
      }
      
      function getCardWidth(): number {

        const screenWidth = window.innerWidth;
        const firstCard = grid.children[0] as HTMLElement;
        let width = 200 // mobile: card + gap
        if (screenWidth >= 1280) width = 400; // xl: card + gap
        if (screenWidth >= 640) width = 320;  // sm: card + gap
        if (screenWidth >= 480) width = 292;  // sm: card + gap

        return firstCard ? firstCard.offsetWidth + 24 : width; // actual width + ga

      }
      
      function updateArrowStates() {
        const visibleVideos = getVisibleVideosCount();
        const maxIndex = Math.max(0, totalVideos - visibleVideos);
        
        // Show/hide arrows based on necessity
        if (totalVideos <= visibleVideos) {
          prevArrow.style.display = 'none';
          nextArrow.style.display = 'none';
          return;
        } else {
          prevArrow.style.display = 'flex';
          nextArrow.style.display = 'flex';
        }
        
        // Update arrow states
        if (currentIndex <= 0) {
          prevArrow.classList.add('disabled');
          prevArrow.setAttribute('aria-disabled', 'true');
        } else {
          prevArrow.classList.remove('disabled');
          prevArrow.setAttribute('aria-disabled', 'false');
        }
        
        if (currentIndex >= maxIndex) {
          nextArrow.classList.add('disabled');
          nextArrow.setAttribute('aria-disabled', 'true');
        } else {
          nextArrow.classList.remove('disabled');
          nextArrow.setAttribute('aria-disabled', 'false');
        }
      }
      
      function navigate(direction: 'prev' | 'next') {
        const visibleVideos = getVisibleVideosCount();
        const maxIndex = Math.max(0, totalVideos - visibleVideos);
        const cardWidth = getCardWidth();
        
        if (direction === 'next' && currentIndex < maxIndex) {
          currentIndex++;
        } else if (direction === 'prev' && currentIndex > 0) {
          currentIndex--;
        }
        
        const translateX = currentIndex * cardWidth;
        grid.style.transform = `translateX(-${translateX}px)`;
        updateArrowStates();
      }
      
      // Event listeners
      nextArrow.addEventListener('click', () => navigate('next'));
      prevArrow.addEventListener('click', () => navigate('prev'));
      
      // Keyboard navigation
      nextArrow.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          navigate('next');
        }
      });
      
      prevArrow.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          navigate('prev');
        }
      });
      
      // Handle window resize
      let resizeTimeout: NodeJS.Timeout;
      window.addEventListener('resize', () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
          // Reset to first position on resize to avoid layout issues
          currentIndex = 0;
          grid.style.transform = 'translateX(0px)';
          updateArrowStates();
        }, 150);
      });
      
      // Initial setup
      updateArrowStates();
    }
  });
</script>
