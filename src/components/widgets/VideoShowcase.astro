---
import Headline from "~/components/ui/Headline.astro";
import WidgetWrapper from "~/components/ui/WidgetWrapper.astro";
import Image from "~/components/common/Image.astro";
import { Icon } from "astro-icon/components";
import type { VideoShowcase as Props } from "~/types";

const {
  title = await Astro.slots.render("title"),
  subtitle = await Astro.slots.render("subtitle"),
  tagline = await Astro.slots.render("tagline"),
  videos = [],
  id,
  isDark = false,
  classes = {},
  type = 2,
  bg = await Astro.slots.render("bg"),
} = Astro.props;
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`max-w-7xl xl:max-w-[1280px] ${classes?.container ?? ""}`}
  bg={bg}
>
  <Headline
    type={type}
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    classes={classes?.headline as Record<string, string>}
  />

  <div class="relative mt-12 xl:mt-[48px]">
    <!-- Video Grid Container -->
    <div class="video-showcase-container overflow-hidden">
      <div class="video-showcase-grid flex gap-6 xl:gap-[24px] transition-transform duration-500">
        {videos.map((video, index) => (
          <div class="video-card flex-shrink-0 w-full sm:w-[calc(50%-12px)] xl:w-[calc(30%-16px)]">
            <a href={video.link} class="group block">
              <div class="relative overflow-hidden rounded-xl xl:rounded-[12px] bg-slate-800 hover:scale-[1.02] transition-all duration-300 shadow-lg hover:shadow-xl">
                <Image
                  class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500"
                  src={video.src}
                  alt={video.alt || `Video ${index + 1}`}
                  width={440}
                  height={440}
                  objectPosition={video?.objectPosition || "top top"}
                  loading="lazy"
                />
                
                <!-- Play Button Overlay -->
                <div class="absolute inset-0 flex items-center justify-center bg-black/20 group-hover:bg-black/30 transition-colors duration-300">
                  <div class="w-16 h-16 xl:w-[64px] xl:h-[64px] rounded-full flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                    <Icon name="tabler:play" class="w-8 h-8 xl:w-[32px] xl:h-[32px] text-white/70 ml-1" />
                  </div>
                </div>
              </div>

              <!-- Video Info (Always Visible) -->
              <div class="mt-4 xl:mt-[16px] space-y-2 xl:space-y-[8px]">
                <div class="flex items-center gap-2">
                  <h3 class="text-lg xl:text-[18px] xl:leading-[24px] font-semibold text-default group-hover:text-primary transition-colors duration-300">
                    {video.title}
                  </h3>
                  <!-- Animated Arrow on Hover -->
                  <div class="arrow-container opacity-0 group-hover:opacity-100 transition-all duration-300 transform translate-x-[-8px] group-hover:translate-x-0">
                    <Icon name="tabler:arrow-right" class="w-5 h-5 xl:w-[20px] xl:h-[20px] text-primary" />
                  </div>
                </div>

                {video.description && (
                  <p class="text-sm xl:text-[14px] xl:leading-[20px] text-muted" set:html={video.description} />
                )}


                <p class="text-sm xl:text-[14px] xl:leading-[20px] text-muted pt-8 xl:pt-[18px]">Topics:</p>

                {video.features && video.features.length > 0 && (
                  <ul class="space-y-1 xl:space-y-[4px]">
                    {video.features.map((feature) => (
                      <li class="flex items-center text-sm xl:text-[14px] xl:leading-[20px] text-muted">
                        <Icon name="tabler:check" class="w-4 h-4 xl:w-[16px] xl:h-[16px] text-primary mr-2 xl:mr-[8px] flex-shrink-0" />
                        {feature}
                      </li>
                    ))}
                  </ul>
                )}
              </div>
            </a>
          </div>
        ))}
      </div>
    </div>

    <!-- Navigation Arrow (shown when there are more than 3 videos) -->
    {videos.length > 3 && (
      <button 
        class="nav-arrow absolute right-0 top-1/2 transform -translate-y-1/2 translate-x-4 xl:translate-x-[16px] w-12 h-12 xl:w-[48px] xl:h-[48px] bg-white rounded-full shadow-lg hover:shadow-xl flex items-center justify-center transition-all duration-300 hover:scale-110 z-10"
        aria-label="View more videos"
      >
        <Icon name="tabler:chevron-right" class="w-6 h-6 xl:w-[24px] xl:h-[24px] text-black" />
      </button>
    )}
  </div>
</WidgetWrapper>

<style>
  .video-showcase-container {
    /* Show 3 full cards and partial 4th on xl screens */
    @media (min-width: 1280px) {
      width: calc(100% + 60px); /* Extra width to show partial 4th card */
      margin-right: -60px;
    }
  }

  .arrow-container {
    animation: slideIn 0.3s ease-out;
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateX(-8px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  /* Smooth scrolling for navigation */
  .video-showcase-grid {
    scroll-behavior: smooth;
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    const navArrow = document.querySelector('.nav-arrow');
    const grid = document.querySelector('.video-showcase-grid') as HTMLElement;
    
    if (navArrow && grid) {
      let currentIndex = 0;
      const cardWidth = 400; // Approximate card width including gap
      const maxIndex = Math.max(0, grid.children.length - 3);
      
      navArrow.addEventListener('click', () => {
        currentIndex = (currentIndex + 1) % (maxIndex + 1);
        const translateX = currentIndex * cardWidth;
        grid.style.transform = `translateX(-${translateX}px)`;
        
        // Update arrow direction based on position
        const icon = navArrow.querySelector('svg');
        if (currentIndex === maxIndex) {
          icon?.setAttribute('class', icon.getAttribute('class')?.replace('chevron-right', 'chevron-left') || '');
          navArrow.setAttribute('aria-label', 'Go back to start');
        } else {
          icon?.setAttribute('class', icon.getAttribute('class')?.replace('chevron-left', 'chevron-right') || '');
          navArrow.setAttribute('aria-label', 'View more videos');
        }
      });
    }
  });
</script>
