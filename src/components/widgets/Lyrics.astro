---
import type { Widget } from "~/types";
import WidgetWrapper from "~/components/ui/WidgetWrapper.astro";
import Headline from "~/components/ui/Headline.astro";
import { getLangFromUrl, useTranslations } from "~/i18n/utils";

// Define the interface for a single song with verses and chorus
export interface Song {
  title: string;
  verses: string[];
  chorus?: string;
}

// Define the props for the Lyrics component
export interface Props extends Widget {
  songs: Array<Song>;
  title?: string;
  subtitle?: string;
  tagline?: string;
  containerClass?: string;
}

const {
  songs = [],
  title = await Astro.slots.render("title"),
  subtitle = await Astro.slots.render("subtitle"),
  tagline = await Astro.slots.render("tagline"),
  id,
  isDark = false,
  containerClass,
  bg,
} = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<WidgetWrapper {id} {isDark} {containerClass} {bg}>
  <Headline {title} {subtitle} {tagline} />

  <!-- Song Selection Buttons -->
  <div class="mb-12 xl:mb-[64px]" id="lyrics-buttons">
    <div class="flex flex-wrap justify-center gap-3 xl:gap-[12px] max-w-4xl xl:max-w-[896px] mx-auto">
      {
        songs.map((song, index) => (
          <button
            class="lyrics-button px-6 py-3 xl:px-[24px] xl:py-[12px] rounded-full border border-gray-300 dark:border-gray-600 
                 bg-white dark:bg-purple-900/40 text-gray-700 dark:text-gray-300 
                 hover:border-orange-500 hover:text-orange-600 dark:hover:text-orange-400
                 transition-all duration-300 ease-in-out transform
                 font-medium text-sm xl:text-base shadow-md hover:shadow-lg
                 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-opacity-50"
            data-target={`lyrics-${index}`}
          >
            {song.title}
          </button>
        ))
      }
    </div>
  </div>

  <!-- Lyrics Content -->
  <div id="lyrics-content" class="max-w-4xl xl:max-w-[896px] mx-auto">
    {
      songs.map((song, index) => (
        <div id={`lyrics-${index}`} class="lyrics-panel hidden">
          <div class="bg-page rounded-lg p-8 xl:p-[24px] shadow-xl border border-gray-200 dark:border-gray-700">
            <h3
              class="text-2xl xl:text-3xl font-bold text-center mb-8 xl:mb-[24px] 
                     text-gray-800 dark:text-white"
            >
              {song.title}
            </h3>

            <div class="space-y-8 xl:space-y-[40px]">
              {song.verses.map((verse, verseIndex) => (
                <div class="verse">
                  <div class="flex items-center mb-4 xl:mb-[16px]">
                    <span class="bg-orange-500 text-white px-3 py-1 xl:px-[12px] xl:py-[4px] rounded-full text-sm font-semibold mr-3 xl:mr-[12px]">
                      {t("verse")} {verseIndex + 1}
                    </span>
                    <div class="flex-1 h-px bg-gradient-to-r from-orange-500 to-transparent" />
                  </div>
                  <p
                    class="text-lg xl:text-xl leading-relaxed text-gray-700 dark:text-gray-300 
                         whitespace-pre-line pl-4 xl:pl-[16px] border-l-4 border-orange-200 dark:border-orange-800"
                    set:html={verse}
                  />
                </div>
              ))}

              {song.chorus && (
                <div class="chorus mt-8 xl:mt-[40px]">
                  <div class="flex items-center mb-4">
                    <span class="bg-gradient-to-r from-yellow-500 to-orange-500 text-white px-3 py-1 xl:px-[12px] xl:py-[4px] rounded-full text-sm font-semibold mr-3 xl:mr-[12px]">
                      {t("chorus")}
                    </span>
                    <div class="flex-1 h-px bg-gradient-to-r from-yellow-500 to-transparent" />
                  </div>
                  <p
                    class="text-lg xl:text-xl leading-relaxed text-gray-700 dark:text-gray-300 
                         whitespace-pre-line pl-4 xl:pl-[16px] py-4 xl:py-[12px] border-l-4 border-yellow-200 dark:border-yellow-800
                         bg-yellow-50 dark:bg-yellow-900/20 rounded-r-lg"
                    set:html={song.chorus}
                  />
                </div>
              )}
            </div>
          </div>
        </div>
      ))
    }
  </div>
</WidgetWrapper>

<script>
  function setupLyrics(): void {
    const lyricsButtonsContainer = document.getElementById("lyrics-buttons");
    const lyricsContentContainer = document.getElementById("lyrics-content");

    if (lyricsButtonsContainer && lyricsContentContainer) {
      const buttons = lyricsButtonsContainer.querySelectorAll(".lyrics-button");
      const panels = lyricsContentContainer.querySelectorAll(".lyrics-panel");

      // Function to handle button click
      const handleButtonClick = (e: Event) => {
        const target = e.target as HTMLButtonElement;
        if (!target.classList.contains("lyrics-button")) return;

        // Deactivate all buttons
        buttons.forEach((button) => {
          button.classList.remove("text-white", "border-orange-500", "shadow-lg");
          button.classList.add(
            "border-gray-300",
            "dark:border-gray-600",
            "bg-white",
            "dark:bg-purple-900/40",
            "text-gray-700",
            "dark:text-gray-300"
          );
        });

        // Activate clicked button
        target.classList.remove(
          "border-gray-300",
          "dark:border-gray-600",
          "bg-white",
          "dark:bg-purple-900/40",
          "text-gray-700",
          "dark:text-gray-300"
        );
        target.classList.add("text-white", "border-orange-500", "shadow-lg");

        // Hide all panels with fade effect
        panels.forEach((panel) => {
          panel.classList.add("hidden");
        });

        // Show target panel with fade effect
        const targetPanelId = target.getAttribute("data-target");
        if (targetPanelId) {
          const targetPanel = document.getElementById(targetPanelId);
          if (targetPanel) {
            targetPanel.classList.remove("hidden");
            // Add a small delay to ensure smooth transition
            setTimeout(() => {
              targetPanel.scrollIntoView({ behavior: "smooth", block: "nearest" });
            }, 100);
          }
        }
      };

      lyricsButtonsContainer.addEventListener("click", handleButtonClick);

      // Activate the first button and panel by default
      if (buttons.length > 0 && panels.length > 0) {
        const firstButton = buttons[0] as HTMLButtonElement;
        firstButton.classList.remove(
          "border-gray-300",
          "dark:border-gray-600",
          "bg-white",
          "dark:bg-purple-900/40",
          "text-gray-700",
          "dark:text-gray-300"
        );
        firstButton.classList.add("text-white", "border-orange-500", "shadow-lg");
        panels[0].classList.remove("hidden");
      }
    }
  }

  // Initialize navigation when the DOM is ready and after each page navigation
  function initializeNavigation() {
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", setupLyrics);
    } else {
      setupLyrics();
    }
  }

  initializeNavigation();
  document.addEventListener("astro:page-load", initializeNavigation);
</script>
