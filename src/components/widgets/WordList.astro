---
import { twMerge } from "tailwind-merge";
import WidgetWrapper from "../ui/WidgetWrapper.astro";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";

export interface WordItem {
  image: ImageMetadata;
  title: string;
  subtitle: string;
  description: string;
  color: "orange" | "blue" | "green" | "purple" | "red" | "yellow" | "pink" | "indigo";
  emoji: string;
}

export interface Props {
  wordItems: WordItem[];
  containerClass?: string;
}

const { wordItems, containerClass = "" } = Astro.props;

// Color theme mappings
const colorThemes = {
  orange: {
    gradient: "from-orange-500 to-red-600",
    borderHover: "border-orange-500/50 hover:border-orange-500/80",
    borderLeft: "border-orange-400",
    textColor: "text-orange-200",
  },
  blue: {
    gradient: "from-blue-500 to-purple-600",
    borderHover: "border-blue-500/50 hover:border-blue-500/80",
    borderLeft: "border-blue-400",
    textColor: "text-blue-200",
  },
  green: {
    gradient: "from-green-500 to-teal-600",
    borderHover: "border-green-500/50 hover:border-green-500/80",
    borderLeft: "border-green-400",
    textColor: "text-green-200",
  },
  purple: {
    gradient: "from-purple-500 to-pink-600",
    borderHover: "border-purple-500/50 hover:border-purple-500/80",
    borderLeft: "border-purple-400",
    textColor: "text-purple-200",
  },
  red: {
    gradient: "from-red-500 to-red-800",
    borderHover: "border-red-500/50 hover:border-red-500/80",
    borderLeft: "border-red-400",
    textColor: "text-red-200",
  },
  yellow: {
    gradient: "from-yellow-500 to-orange-600",
    borderHover: "border-yellow-500/50 hover:border-yellow-500/80",
    borderLeft: "border-yellow-400",
    textColor: "text-yellow-200",
  },
  pink: {
    gradient: "from-red-500 to-pink-600",
    borderHover: "border-red-500/50 hover:border-red-500/80",
    borderLeft: "border-pink-400",
    textColor: "text-pink-200",
  },
  indigo: {
    gradient: "from-indigo-500 to-blue-800",
    borderHover: "border-indigo-500/50 hover:border-indigo-500/80",
    borderLeft: "border-indigo-400",
    textColor: "text-indigo-200",
  },
};
---

<WidgetWrapper
  id="word-list"
  animated={false}
  containerClass={twMerge("py-16 xl:py-[64px] scroll-mt-[100px]", containerClass)}
>
  <div class="max-w-6xl xl:max-w-[1152px] mx-auto">
    <div class="space-y-16 xl:space-y-[64px]">
      {
        wordItems.map((item, index) => {
          const theme = colorThemes[item.color];
          const isLeft = index % 2 !== 0; // 1st left (0), 2nd right (1), 3rd left (2)

          return (
            <div class="group relative">
              <div class="flex flex-col sm:flex-row items-start space-x-6 xl:space-x-[24px] space-y-6 sm:space-y-0">
                <div class="flex-1">
                  <div
                    class={`bg-gray-800/50 backdrop-blur-sm rounded-2xl xl:rounded-[16px] p-2 border border-gray-700 ${theme.borderHover} transition-all duration-300 overflow-hidden`}
                  >
                    <div
                      class={`flex flex-col lg:flex-row ${isLeft ? "lg:flex-row-reverse" : ""} gap-6 xl:gap-[24px] items-start`}
                    >
                      {/* Image Section */}
                      <div class="flex justify-center lg:justify-start flex-shrink-0">
                        <div class="relative overflow-hidden rounded-xl xl:rounded-[12px] shadow-lg group-hover:shadow-xl transition-all duration-500 w-60 h-60 xl:w-[280px] xl:h-[280px]">
                          <Image
                            src={item.image}
                            alt={item.title}
                            class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-700"
                            loading="lazy"
                            decoding="async"
                          />
                        </div>
                      </div>

                      {/* Content Section */}
                      <div class="flex flex-col flex-1 p-6 xl:p-8">
                        {/* Header Section */}
                        <div class="mb-6 xl:mb-[24px]">
                          <div class="flex items-center gap-4 xl:gap-[16px] mb-3 xl:mb-[12px]">
                            <div
                              class={`w-12 h-12 xl:w-[48px] xl:h-[48px] bg-gradient-to-br ${theme.gradient} rounded-full flex items-center justify-center text-white text-lg xl:text-[18px] font-bold shadow-lg group-hover:scale-110 transition-transform duration-300`}
                            >
                              {index + 1}
                            </div>
                            <span class="text-3xl xl:text-[28px]">{item.emoji}</span>
                          </div>
                          
                          <h3
                            class="text-2xl xl:text-[28px] xl:leading-[36px] font-bold text-white mb-2 xl:mb-[8px]"
                            set:html={item.title}
                          />
                          
                          <p
                            class="text-lg xl:text-[18px] xl:leading-[26px] text-blue-200 font-medium"
                            set:html={item.subtitle}
                          />
                        </div>

                        {/* Description Section */}
                        <div class="relative">
                          <div class={`bg-gradient-to-br from-gray-900/80 to-gray-800/60 rounded-xl xl:rounded-[12px] p-5 xl:p-[20px] border border-gray-600/50 shadow-inner`}>
                            <div class={`absolute left-0 top-0 bottom-0 w-1 bg-gradient-to-b ${theme.gradient} rounded-l-xl`}></div>
                            <p
                              class="text-gray-200 text-base xl:text-[16px] xl:leading-[26px] leading-relaxed pl-4 xl:pl-[16px]"
                              set:html={item.description}
                            />
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          );
        })
      }
    </div>
  </div>
</WidgetWrapper>
