---
import { getPermalink } from "~/utils/permalinks";
import { Icon } from "astro-icon/components";
import Image from "astro/components/Image.astro";
import type { MenuLink } from "./Header.astro";
import { getLangFromUrl, useTranslations } from "~/i18n/utils";
import { ui } from "~/i18n/ui";

interface Props {
  links: Array<MenuLink>;
  currentPath: string;
}

const { links, currentPath } = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<div
  class="dropdown-menu absolute top-[56px] right-[10%] lg:backdrop-blur-md lg:bg-[#fff2dbb9]/80 dark:lg:bg-[#1a0024d2]/80 drop-shadow-xl lg:border border-gray-200 dark:border-gray-800 transition-all duration-300 ease-in-out opacity-0 pointer-events-none transform rounded-md"
  data-navigation-menu
>
  <div class="w-[492px]">
    <div
      class="flex overflow-hidden relative transition-[height] duration-300 ease-in-out"
      style="height: 180px;"
      data-nav-container
    >
      {
        links.map((headerLinks, index) => (
          <div
            class:list={[
              "w-full h-full flex-shrink-0 transition-all duration-500 ease-in-out transform absolute inset-0",
              { "translate-x-0 opacity-100 z-10": index === 0 },
              { "translate-x-[30%] opacity-0 z-0": index > 0 },
            ]}
            role="tabpanel"
            id={`nav-panel-${index}`}
            data-nav-panel={index}
          >
            <div class="lg:flex lg:flex-row lg:items-start lg:gap-4 xl:gap-[16px] lg:p-4 xl:p-[16px] h-full">
              <ul class="w-1/2">
                {headerLinks.links
                  ?.filter((link) => !link.image)
                  .map(({ text, href, icon, description }) => (
                    <li>
                      <a
                        class:list={[
                          "first:rounded-t last:rounded-b py-1 xl:py-[4px] px-2 xl:px-[8px] block whitespace-no-wrap group",
                          { "aw-link-active": href === currentPath },
                        ]}
                        href={getPermalink(`${lang}/${href}`)}
                      >
                        <div class="flex items-center gap-2 xl:gap-[8px]">
                          {icon && (
                            <Icon
                              name={icon}
                              class="w-7 h-7 xl:w-[28px] xl:h-[28px] text-black dark:text-white group-hover:text-orange-700"
                            />
                          )}
                          <div class="flex flex-col">
                            <span class="inline-block font-medium xl:text-[16px] xl:leading-[24px] text-transparent bg-clip-text bg-gradient-to-r from-black to-black dark:from-white dark:to-white group-hover:from-orange-600 group-hover:to-yellow-500">
                              {text ? t(text as keyof typeof ui.en) : text}
                            </span>
                            {description && (
                              <span class="text-sm xl:text-[14px] xl:leading-[20px] text-muted">
                                {description ? t(description as keyof typeof ui.en) : description}
                              </span>
                            )}
                          </div>
                        </div>
                      </a>
                    </li>
                  ))}
              </ul>
              <ul class="lg:w-1/2 lg:space-y-2 xl:space-y-[8px] lg:block">
                {headerLinks.links
                  ?.filter((link) => link.image)
                  .map(({ text, href, image }) => (
                    <li class="group">
                      <a
                        class="relative block h-24 xl:h-[96px] rounded-lg transform-gpu overflow-hidden ring-0 ring-white dark:ring-gray-700 group-hover:ring-1 transition duration-200"
                        href={getPermalink(`${lang}/${href}`)}
                      >
                        {image && (
                          <Image
                            src={image.src}
                            alt={image?.alt}
                            width={400}
                            height={300}
                            class="absolute inset-0 w-full h-full object-cover object-center opacity-60 group-hover:opacity-80 group-hover:scale-105 transition duration-500 transform-gpu"
                          />
                        )}
                        <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-black/20" />
                        <div class="absolute bottom-0 left-0 p-4 xl:p-[16px] py-2 xl:py-[8px]">
                          <span class="text-white font-medium xl:text-[16px] xl:leading-[24px]">
                            {text ? t(text as keyof typeof ui.en) : text}
                          </span>
                        </div>
                      </a>
                    </li>
                  ))}
              </ul>
            </div>
          </div>
        ))
      }
    </div>
  </div>
</div>

<script>
  function setupNavigation() {
    const menu = document.querySelector("[data-navigation-menu]") as HTMLElement;
    const container = menu?.querySelector("[data-nav-container]") as HTMLElement;
    const panels = menu?.querySelectorAll("[data-nav-panel]");
    const headerButtons = document.querySelectorAll("[data-nav-button]");
    let activePanel = 0;
    let isMouseOverMenu = false;
    const mdBreakpoint = 768; // Tailwind's md breakpoint

    if (window.innerWidth <= 1024) return;

    function isMediumScreen() {
      return window.innerWidth >= mdBreakpoint;
    }

    function setActiveButton(index: number) {
      headerButtons.forEach((button, i) => {
        const span = button.querySelector("span");
        const icon = button.querySelector("svg");
        if (i === index) {
          span?.classList.add("text-primary");
          icon?.classList.add("rotate-180");
        } else {
          span?.classList.remove("text-primary");
          icon?.classList.remove("rotate-180");
        }
      });
    }

    function clearActiveButton() {
      headerButtons.forEach((button) => {
        const span = button.querySelector("span");
        const icon = button.querySelector("svg");
        span?.classList.remove("text-primary");
        icon?.classList.remove("rotate-180");
      });
    }

    function showPanel(index: number) {
      if (!isMediumScreen()) return;

      const direction = index > activePanel ? 1 : -1;
      const height = index === 0 ? 232 : index === 2 ? 144 : 232;

      // Show menu with smooth animation
      if (menu) {
        menu.classList.remove("opacity-0", "pointer-events-none");
        menu.classList.add("opacity-100", "pointer-events-auto");
        menu.style.transform = "translateY(0)";
      }

      // Animate container height
      if (container) {
        container.style.height = `${height}px`;
      }
      // if (menu) {
      //   menu.style.left = index === 2 ? '31%' : '29%';
      // }

      if (index !== activePanel) {
        panels?.forEach((panel, i) => {
          if (i === index) {
            // Panel sliding in
            (panel as HTMLElement).style.transform = `translateX(${direction * 30}%)`; // Start from right/left
            panel.classList.remove("opacity-0", "z-0");
            panel.classList.add("z-10");
            requestAnimationFrame(() => {
              (panel as HTMLElement).style.transform = "translateX(0)";
              panel.classList.add("opacity-100");
            });
          } else {
            // Panel sliding out
            (panel as HTMLElement).style.transform = "translateX(0)";
            panel.classList.remove("z-10");
            panel.classList.add("z-0");
            requestAnimationFrame(() => {
              (panel as HTMLElement).style.transform = `translateX(${-direction * 30}%)`;
              panel.classList.remove("opacity-100");
              panel.classList.add("opacity-0");
            });
          }
        });
      }

      activePanel = index;
      setActiveButton(index);
    }

    function hideMenu() {
      if (menu) {
        menu.classList.remove("opacity-100", "pointer-events-auto");
        menu.classList.add("opacity-0", "pointer-events-none");
      }
      clearActiveButton();
    }

    headerButtons.forEach((button, index) => {
      button.addEventListener("mouseenter", () => {
        showPanel(index);
      });
    });

    menu?.addEventListener("mouseenter", () => {
      isMouseOverMenu = true;
    });

    menu?.addEventListener("mouseleave", () => {
      isMouseOverMenu = false;
      hideMenu();
    });

    document.addEventListener("mouseover", (e) => {
      const target = e.target as HTMLElement;
      if (
        !menu?.contains(target) &&
        !Array.from(headerButtons).some((button) => button.contains(target)) &&
        !isMouseOverMenu
      ) {
        hideMenu();
      }
    });
  }

  // Initialize navigation when the DOM is ready and after each page navigation
  function initializeNavigation() {
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", setupNavigation);
    } else {
      setupNavigation();
    }
  }

  initializeNavigation();
  document.addEventListener("astro:page-load", initializeNavigation);
</script>
