---
import Image from "~/components/common/Image.astro";
import Button from "~/components/ui/Button.astro";
import type { Hero as Props } from "~/types";
import { twMerge } from "tailwind-merge";

const {
  title = await Astro.slots.render("title"),
  subtitle = await Astro.slots.render("subtitle"),
  tagline,
  tagline2,
  content = await Astro.slots.render("content"),
  actions = await Astro.slots.render("actions"),
  image = await Astro.slots.render("image"),
  imageText = await Astro.slots.render("imageText"),

  classes = {},
  id,
  bg = await Astro.slots.render("bg"),
} = Astro.props;

const { labelContainer: labelContainerClass = "" } = classes;
const { containerClass = "", titleClass = "", subtitleClass = "", subtitleContainerClass = "" } = classes;
---

<section class="relative md:-mt-[76px] not-prose" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>
  <div class="relative max-w-7xl xl:max-w-[1440px] mx-auto px-4 sm:px-6 xl:px-[24px]">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div class={twMerge("py-12 md:py-20 xl:py-[80px]", labelContainerClass as string)}>
      <div class={twMerge("text-center max-w-6xl xl:max-w-[1080px] mx-auto", containerClass)}>
        {
          tagline && (
            <p
              class="text-base xl:text-[16px] xl:leading-[24px] text-blue-200 font-bold tracking-wide uppercase intersect-once intersect-tenth sm:intersect-quarter motion-safe:opacity-0 motion-safe:intersect:animate-fade"
              set:html={tagline}
            />
          )
        }
        {
          tagline2 && (
            <p
              class="text-base xl:text-[16px] xl:leading-[24px] bg-gradient-to-r from-orange-600 to-yellow-500 text-transparent bg-clip-text font-bold tracking-wide uppercase intersect-once intersect-tenth sm:intersect-quarter motion-safe:opacity-0 motion-safe:intersect:animate-fade"
              set:html={tagline2}
            />
          )
        }
        {
          title && (
            <h1
              class={twMerge(
                "text-4xl xs:text-5xl md:text-6xl xl:text-[60px] xl:leading-[64px] font-bold leading-tighter tracking-tighter mb-4 xl:mb-[16px] font-heading text-gray-200 intersect-once intersect-tenth sm:intersect-quarter motion-safe:opacity-0 motion-safe:intersect:animate-fade",
                titleClass
              )}
              set:html={title}
            />
          )
        }
        <div class={twMerge("max-w-3xl xl:max-w-[1080px] mx-auto", subtitleContainerClass)}>
          {
            subtitle && (
              <p
                class={twMerge(
                  "text-xl xl:text-[20px] xl:leading-[28px] mb-6 xl:mb-[24px] text-slate-300 intersect-once intersect-tenth sm:intersect-quarter motion-safe:opacity-0 motion-safe:intersect:animate-fade",
                  subtitleClass
                )}
                set:html={subtitle}
              />
            )
          }
          {
            actions && (
              <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 xl:gap-[16px] intersect-once intersect-tenth sm:intersect-quarter motion-safe:opacity-0 motion-safe:intersect:animate-fade">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="w-full sm:mb-0" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <Fragment set:html={content} />}
      </div>
      <div
        class="intersect-once intercept-no-queue intersect-tenth sm:intersect-quarter motion-safe:opacity-0 motion-safe:intersect:animate-fade"
      >
        {
          image && (
            <div class="relative m-auto max-w-5xl xl:max-w-[1024px]">
              {typeof image === "string" ? (
                <Fragment set:html={image} />
              ) : (
                image && (
                  <div class="relative m-auto max-w-5xl xl:max-w-[1024px]">
                    {image.link ? (
                      <a href={image.link.href} target={image.link.target} rel={image.link.rel}>
                        <Image
                          class={twMerge("mx-auto rounded-md w-full", image?.class ?? "")}
                          widths={[400, 768, 1024, 2040]}
                          sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                          loading="eager"
                          width={1024}
                          height={image.isInfographics ? 737 : 576}
                          objectPosition={image?.objectPosition || "top top"}
                          {...image}
                        />
                      </a>
                    ) : (
                      <Image
                        class={twMerge("mx-auto rounded-md w-full", image?.class ?? "")}
                        widths={[400, 768, 1024, 2040]}
                        sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                        loading="eager"
                        decoding="async"
                        objectPosition={image?.objectPosition || "top top"}
                        width={image?.width || (image.isInfographics ? 1080 : 1024)}
                        height={image?.height || (image.isInfographics ? 737 : 576)}
                        {...image}
                      />
                    )}
                  </div>
                )
              )}
              {imageText && (
                <p class="text-center text-sm xl:text-[14px] xl:leading-[20px] text-slate-400" set:html={imageText} />
              )}
            </div>
          )
        }
      </div>
    </div>
  </div>
</section>
